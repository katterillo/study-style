{"version":3,"file":"dx-scheduler-core.es.js","sources":["../src/utils.ts","../src/constants.ts","../src/plugins/common/helpers.ts","../src/plugins/common/computeds.ts","../src/plugins/appointments/helpers.ts","../src/plugins/week-view/helpers.ts","../src/plugins/week-view/computeds.ts","../src/plugins/vertical-rect/helpers.ts","../src/plugins/all-day-panel/helpers.ts","../src/plugins/appointment-form/constants.ts","../src/plugins/month-view/helpers.ts","../src/plugins/horizontal-rect/helpers.ts","../src/plugins/month-view/computeds.ts","../src/plugins/all-day-panel/computeds.ts","../src/plugins/integrated-grouping/helpers.ts","../src/plugins/integrated-grouping/computeds.ts","../src/plugins/common/calculate-rects.ts","../src/plugins/scheduler-core/helpers.ts","../src/plugins/scheduler-core/computeds.ts","../src/plugins/grouping-panel/utils.ts","../src/plugins/week-view/utils.ts","../src/plugins/view-state/reducers.ts","../src/plugins/appointment-tooltip/reducers.ts","../src/plugins/appointment-tooltip/constants.ts","../src/plugins/appointment-form/reducers.ts","../src/plugins/appointment-form/utils.ts","../src/plugins/appointment-form/helpers.ts","../src/plugins/editing-state/reducers.ts","../src/plugins/editing-state/computeds.ts","../src/plugins/editing-state/helpers.ts","../src/plugins/drag-drop-provider/helpers.ts","../src/plugins/current-time-indicator/helpers.tsx","../src/plugins/resources/helpers.ts","../src/plugins/resources/computeds.ts","../src/plugins/grouping-state/reducers.ts","../src/plugins/common/utils.ts","../src/plugins/date-navigator/helpers.ts","../src/types/appointment-form.types.ts"],"sourcesContent":["import moment from 'moment';\nimport { CustomFunction, PureComputed } from '@devexpress/dx-core';\nimport { RRule, RRuleSet } from 'rrule';\nimport {\n  ComputedHelperFn, ViewPredicateFn,\n  CalculateFirstDateOfWeekFn, AppointmentMoment,\n  Interval, Rect, AppointmentKey,\n} from './types';\n\nexport const computed: ComputedHelperFn = (getters, viewName, baseComputed, defaultValue) => {\n  if (getters.currentView.name !== viewName && !!defaultValue) {\n    return defaultValue;\n  }\n  return baseComputed(getters, viewName);\n};\n\nexport const toPercentage: PureComputed<\n  [number, number]\n> = (value, total) => (value * 100) / total;\n\nconst createExcludedInterval: CustomFunction<\n  [number, moment.Moment], Interval\n> = (day, start) => {\n  const leftBound = moment(start.day(day));\n  return [\n    leftBound,\n    moment(leftBound).hour(start.hour()).endOf('day'),\n  ];\n};\n\nexport const excludedIntervals: PureComputed<\n  [number[], moment.Moment], Interval[]\n> = (excludedDays, start) => excludedDays\n  .map(day => (day === 0 ? 7 : day))\n  .sort((a, b) => a - b)\n  .reduce((acc, day, i, allDays) => {\n    if (i && day === allDays[i - 1] + 1) {\n      acc[acc.length - 1][1].day(day);\n    } else {\n      acc.push(createExcludedInterval(day, start));\n    }\n    return acc;\n  }, [] as Interval[]);\n\nconst inInterval = (\n  date: moment.Moment, interval: Interval,\n) => date.isBetween(interval[0], interval[1], undefined, '[]');\n\nexport const viewPredicate: ViewPredicateFn = (\n  appointment, left, right,\n  excludedDays = [],\n  removeAllDayAppointments = false,\n) => {\n  const { start, end } = appointment;\n  const isAppointmentInBoundary = end.isAfter(left as Date)\n    && start.isBefore(right as Date);\n\n  const isAppointmentInExcludedDays = !!excludedIntervals(excludedDays, moment(left as Date))\n    .find(interval => (inInterval(start, interval) && inInterval(end, interval)));\n  const considerAllDayAppointment = removeAllDayAppointments\n    ? moment(end).diff(start, 'hours') < 24 && !appointment.allDay\n    : true;\n\n  return isAppointmentInBoundary && !isAppointmentInExcludedDays && considerAllDayAppointment;\n};\n\nexport const calculateFirstDateOfWeek: CalculateFirstDateOfWeekFn = (\n  currentDate, firstDayOfWeek, excludedDays = [],\n) => {\n  const currentLocale = moment.locale();\n  moment.updateLocale('tmp-locale', {\n    week: { dow: firstDayOfWeek, doy: 1 }, // `doy` is required for TS using\n  });\n  const firstDateOfWeek = moment(currentDate as Date).startOf('week');\n  if (excludedDays.indexOf(firstDayOfWeek) !== -1) {\n    excludedDays.slice().sort().forEach((day) => {\n      if (day === firstDateOfWeek.day()) {\n        firstDateOfWeek.add(1, 'days');\n      }\n    });\n  }\n  moment.locale(currentLocale);\n\n  return firstDateOfWeek.toDate();\n};\n\nexport const getAppointmentStyle: PureComputed<\n  [Rect], React.CSSProperties\n> = ({\n  top, left,\n  width, height,\n}) => ({\n  height,\n  width: `${width}%`,\n  transform: `translateY(${top}px)`,\n  msTransform: `translateY(${top}px)`,\n  left: `${left}%`,\n  position: 'absolute',\n});\n\nconst expandRecurrenceAppointment = (\n  appointment: AppointmentMoment, leftBound: Date, rightBound: Date,\n) => {\n  const rightBoundUTC = moment(getUTCDate(rightBound)).toDate();\n  const leftBoundUTC = moment(getUTCDate(leftBound)).toDate();\n  const appointmentStartDate = moment(appointment.start).toDate();\n  const options = {\n    ...RRule.parseString(appointment.rRule),\n    dtstart: moment(getUTCDate(appointmentStartDate)).toDate(),\n  };\n  const correctedOptions = options.until\n    ? { ...options, until: moment(getUTCDate(options.until)).toDate() }\n    : options;\n\n  const rruleSet = getRRuleSetWithExDates(appointment.exDate);\n\n  rruleSet.rrule(new RRule(correctedOptions));\n\n  // According to https://github.com/jakubroztocil/rrule#important-use-utc-dates\n  // we have to format the dates we get from RRuleSet to get local dates\n  const datesInBoundaries = rruleSet.between(leftBoundUTC as Date, rightBoundUTC as Date, true)\n    .map(formatDateToString);\n  if (datesInBoundaries.length === 0) return [];\n\n  const appointmentDuration = moment(appointment.end)\n    .diff(appointment.start, 'minutes');\n\n  return datesInBoundaries.map((startDate, index) => ({\n    ...appointment,\n    dataItem: {\n      ...appointment.dataItem,\n      startDate: moment(startDate).toDate(),\n      endDate: moment(startDate).add(appointmentDuration, 'minutes').toDate(),\n      parentData: appointment.dataItem,\n    },\n    start: moment(startDate),\n    end: moment(startDate).add(appointmentDuration, 'minutes'),\n    key: `${appointment.key}_rec_${index}`,\n  }));\n};\n\nexport const filterByViewBoundaries: PureComputed<\n  [AppointmentMoment, Date, Date, number[], boolean], AppointmentMoment[]\n> = (appointment, leftBound, rightBound, excludedDays, removeAllDay) => {\n  let appointments = [appointment];\n  if (appointment.rRule) {\n    appointments = expandRecurrenceAppointment(\n      appointment as AppointmentMoment, leftBound as Date, rightBound as Date,\n    );\n  }\n  return appointments.filter(appt => viewPredicate(\n    appt, leftBound, rightBound, excludedDays, removeAllDay,\n  ));\n};\n\nexport const getUTCDate: PureComputed<[Date], number> = date =>\n  Date.UTC(\n    date.getFullYear(),\n    date.getMonth(),\n    date.getDate(),\n    date.getHours(),\n    date.getMinutes(),\n);\n\nexport const getRRuleSetWithExDates: PureComputed<\n  [string | undefined], RRuleSet\n> = (exDate) => {\n  const rruleSet = new RRuleSet();\n  if (exDate) {\n    exDate.split(',').map((date: string) => {\n      const currentExDate = moment(date).toDate();\n      rruleSet.exdate(moment(getUTCDate(currentExDate)).toDate());\n    });\n  }\n  return rruleSet;\n};\n\nexport const formatDateToString = (date: Date | string | number) => moment.utc(date).format('YYYY-MM-DDTHH:mm');\n\nexport const addDateToKey: PureComputed<\n  [AppointmentKey, moment.Moment], AppointmentKey\n> = (prevKey, momentDate) => `${prevKey}_${momentDate.toDate().toString()}`;\n","import { GroupOrientation } from './types';\n\nexport const VERTICAL_TYPE = 'vertical';\nexport const HORIZONTAL_TYPE = 'horizontal';\n\nexport const SCROLL_OFFSET = 50;\nexport const SCROLL_SPEED_PX = 15;\n\nexport const SECONDS = 'seconds';\nexport const MINUTES = 'minutes';\nexport const HOURS = 'hours';\n\nexport const RESIZE_TOP = 'resize-start';\nexport const RESIZE_BOTTOM = 'resize-end';\n\nexport const POSITION_START = 'start';\nexport const POSITION_END = 'end';\n\nexport const AUTO_HEIGHT = 'auto';\n\nexport const DAY_OPTIONS = { day: 'numeric' };\nexport const WEEK_DAY_OPTIONS = { weekday: 'short' };\nexport const SHORT_MONTH_OPTIONS = { month: 'short' };\nexport const HOUR_MINUTE_OPTIONS = { hour: 'numeric', minute: 'numeric' };\nexport const MONTH_YEAR_OPTIONS = { month: 'long', year: 'numeric' };\nexport const DAY_SHORT_MONTH_OPTIONS = { day: 'numeric', month: 'short' };\nexport const SHORT_MONTH_LONG_YEAR_OPTIONS = { month: 'short', year: 'numeric' };\nexport const SHORT_MONTH_SHORT_YEAR_OPTIONS = { month: 'short', year: '2-digit' };\nexport const DAY_LONG_MONTH_LONG_YEAR_OPTIONS = { day: 'numeric', month: 'long', year: 'numeric' };\nexport const DAY_SHORT_MONTH_LONG_YEAR_OPTIONS = {\n  day: 'numeric', month: 'short', year: 'numeric',\n};\nexport const DAY_SHORT_MONTH_SHORT_YEAR_OPTIONS = {\n  day: 'numeric', month: 'short', year: '2-digit',\n};\nexport const LONG_WEEK_DAY_OPTIONS = { weekday: 'long' };\nexport const LONG_MONTH_OPTIONS = { month: 'long' };\nexport const DAY_LONG_MONTH_OPTIONS = { day: 'numeric', month: 'long' };\nexport const EMPTY_OPTIONS = {};\n\nexport const RECURRENCE_EDIT_SCOPE = {\n  ALL: 'all',\n  CURRENT_AND_FOLLOWING: 'currentAndFollowing',\n  CURRENT: 'current',\n};\n\nexport const TOGGLE_APPOINTMENT_FORM_VISIBILITY = 'toggleAppointmentFormVisibility';\nexport const TOGGLE_APPOINTMENT_TOOLTIP_VISIBILITY = 'toggleAppointmentTooltipVisibility';\n\nexport const WEEKDAY_INTERVAL = 'weekdayInterval';\n\nexport const VERTICAL_VIEW_LEFT_OFFSET = 80;\nexport const HORIZONTAL_VIEW_LEFT_OFFSET = 0;\n\nexport const VERTICAL_GROUP_ORIENTATION = 'Vertical' as GroupOrientation;\nexport const HORIZONTAL_GROUP_ORIENTATION = 'Horizontal' as GroupOrientation;\n\nexport const VIEW_TYPES = {\n  MONTH: 'month',\n  WEEK: 'week',\n  DAY: 'day',\n  ALL_DAY_PANEL: 'allDayPanel',\n};\n","import moment from 'moment';\nimport { PureComputed } from '@devexpress/dx-core';\nimport {\n  VERTICAL_TYPE, HORIZONTAL_TYPE, DAY_OPTIONS, SHORT_MONTH_OPTIONS,\n  DAY_SHORT_MONTH_OPTIONS, SHORT_MONTH_LONG_YEAR_OPTIONS,\n  SHORT_MONTH_SHORT_YEAR_OPTIONS, MONTH_YEAR_OPTIONS,\n  DAY_LONG_MONTH_LONG_YEAR_OPTIONS, DAY_SHORT_MONTH_SHORT_YEAR_OPTIONS,\n  DAY_SHORT_MONTH_LONG_YEAR_OPTIONS, LONG_WEEK_DAY_OPTIONS, EMPTY_OPTIONS,\n  WEEKDAY_INTERVAL,\n} from '../../constants';\nimport {\n  ViewBoundTextFn, FormatterFn, ViewCell,\n  AppointmentMoment, Group, SchedulerDateTime, CellElementsMeta,\n} from '../../types';\n\nconst MONTH_TYPE = 'month';\n\nexport const getViewType: PureComputed<[string], string> = (currentViewType) => {\n  if (currentViewType === MONTH_TYPE) return HORIZONTAL_TYPE;\n  return VERTICAL_TYPE;\n};\n\nexport const isMidnight: PureComputed<\n  [Date], boolean\n> = (date) => {\n  const momentDate = moment(date as Date);\n  return momentDate.hours() === 0 && momentDate.minutes() === 0 && momentDate.seconds() === 0;\n};\n\nconst calculateTextByDays: PureComputed<\n  [Date, Date, FormatterFn, object], string\n> = (startViewDate, endViewDate, formatDate, additionalOptions) => {\n  const momentStartViewDate = moment(startViewDate as Date);\n  const momentEndViewDate = moment(endViewDate as Date);\n\n  if (momentStartViewDate.isSame(momentEndViewDate, 'day')) {\n    return formatDate(momentStartViewDate.toDate(), {\n      ...DAY_LONG_MONTH_LONG_YEAR_OPTIONS, ...additionalOptions,\n    });\n  }\n  if (momentStartViewDate.isSame(momentEndViewDate, 'year')) {\n    if (momentStartViewDate.isSame(momentEndViewDate, 'month')) {\n      return `${\n        formatDate(momentStartViewDate.toDate(), DAY_OPTIONS)\n      }-${\n        formatDate(momentEndViewDate.toDate(), DAY_OPTIONS)\n      } ${\n        formatDate(momentEndViewDate.toDate(), MONTH_YEAR_OPTIONS)\n      }`;\n    }\n    return `${\n      formatDate(momentStartViewDate.toDate(), DAY_SHORT_MONTH_OPTIONS)\n    } - ${\n      formatDate(momentEndViewDate.toDate(), DAY_SHORT_MONTH_LONG_YEAR_OPTIONS)\n    }`;\n  }\n  return `${\n    formatDate(momentStartViewDate.toDate(), DAY_SHORT_MONTH_SHORT_YEAR_OPTIONS)\n  } - ${\n    formatDate(momentEndViewDate.toDate(), DAY_SHORT_MONTH_SHORT_YEAR_OPTIONS)\n  }`;\n};\n\nconst calculateTextByMonths: PureComputed<\n  [Date, number, FormatterFn], string\n> = (currentDate, intervalCount, formatDate) => {\n  const momentCurrentDate = moment(currentDate as Date);\n\n  if (intervalCount === 1) {\n    return formatDate(momentCurrentDate.toDate(), MONTH_YEAR_OPTIONS);\n  }\n  const lastMonth = momentCurrentDate.clone().add(intervalCount - 1, 'month');\n  if (momentCurrentDate.isSame(lastMonth, 'year')) {\n    return `${\n      formatDate(momentCurrentDate.toDate(), SHORT_MONTH_OPTIONS)\n    }-${\n      formatDate(lastMonth.toDate(), SHORT_MONTH_LONG_YEAR_OPTIONS)\n    }`;\n  }\n  return `${\n    formatDate(momentCurrentDate.toDate(), SHORT_MONTH_SHORT_YEAR_OPTIONS)\n  } - ${\n    formatDate(lastMonth.toDate(), SHORT_MONTH_SHORT_YEAR_OPTIONS)\n  }`;\n};\n\nexport const viewBoundText: ViewBoundTextFn = (\n  startViewDate, endViewDate, type, currentDate, intervalCount, formatDate,\n) => (type !== 'month'\n  ? calculateTextByDays(\n    startViewDate, endViewDate, formatDate,\n    type === WEEKDAY_INTERVAL ? LONG_WEEK_DAY_OPTIONS : EMPTY_OPTIONS,\n  )\n  : calculateTextByMonths(currentDate, intervalCount, formatDate)\n);\n\nexport const checkCellGroupingInfo: PureComputed<\n  [ViewCell, AppointmentMoment], boolean\n> = (cell, appointment) => cell.groupingInfo\n  ? cell.groupingInfo.every((group: Group) => (\n    group.id === appointment[group.fieldName]\n  ))\n  : true;\n\nexport const isDateValid: PureComputed<\n  [Date], boolean\n> = date => moment(date as Date).isValid();\n\nexport const convertToMoment: PureComputed<\n  [SchedulerDateTime], moment.Moment\n> = date => moment(date as SchedulerDateTime);\n\nexport const areDatesSame: PureComputed<\n  [SchedulerDateTime, SchedulerDateTime], boolean\n> = (firstDate, secondDate) => moment(firstDate as SchedulerDateTime)\n  .isSame(secondDate as SchedulerDateTime, 'date');\n\nexport const getTimeTableHeight: PureComputed<\n  [CellElementsMeta], number | undefined\n> = timeTableElementsMeta => timeTableElementsMeta.parentRect?.().height;\n\nexport const containsDSTChange = (date: SchedulerDateTime) => {\n  const momentDate = moment(date);\n  momentDate.startOf('day');\n  const isStartDST = momentDate.isDST();\n\n  momentDate.endOf('day');\n  const isEndDst = momentDate.isDST();\n\n  return (isStartDST && !isEndDst) || (!isStartDST && isEndDst);\n};\n","import moment from 'moment';\nimport { PureComputed } from '@devexpress/dx-core';\nimport {\n  TimeScale, SchedulerDateTime, ViewCell,\n  DayScaleFn, TimeScaleFn, ViewCellsDataFn, AllDayCell,\n  SchedulerView,\n} from '../../types';\nimport { calculateFirstDateOfWeek } from '../../utils';\nimport {\n  isMidnight,\n  containsDSTChange,\n} from './helpers';\n\nconst subtractSecond: PureComputed<\n  [Date]\n> = date => moment(date as Date).subtract(1, 'second').toDate();\n\nexport const dayScale: DayScaleFn = (\n  currentDate,\n  firstDayOfWeek,\n  dayCount,\n  excluded = [],\n) => {\n  const result: Date[] = [];\n  const date = firstDayOfWeek !== undefined\n    ? moment(calculateFirstDateOfWeek(currentDate, firstDayOfWeek, excluded) as Date)\n    : moment(currentDate as Date);\n  for (let index = 0; index < dayCount; index += 1) {\n    if (excluded.findIndex(item => item === date.day()) === -1) {\n      result.push(date.toDate());\n    }\n    date.add(1, 'days');\n  }\n  return result;\n};\n\nexport const timeScale: TimeScaleFn = (\n  currentDate,\n  firstDayOfWeek,\n  startDayHour,\n  endDayHour,\n  cellDuration,\n  excludedDays,\n) => {\n  const result: TimeScale[] = [];\n  const startDateOfView = firstDayOfWeek !== undefined\n    ? calculateFirstDateOfWeek(currentDate, firstDayOfWeek, excludedDays)\n    : currentDate;\n\n  const isDSTChange = containsDSTChange(startDateOfView as Date);\n  const validDate = moment(startDateOfView as Date);\n  if (isDSTChange) {\n    validDate.subtract(1, 'day');\n  }\n\n  const left = moment(validDate)\n    .startOf('day')\n    .add(startDayHour, 'hour');\n  const right = moment(validDate)\n    .startOf('day')\n    .add(endDayHour, 'hour');\n\n  while (left.isBefore(right)) {\n    const startDate = left.toDate();\n    left.add(cellDuration, 'minutes');\n    result.push({ start: startDate, end: left.toDate() });\n  }\n\n  const timeScaleLastIndex = result.length - 1;\n  if (isMidnight(result[timeScaleLastIndex].end)) {\n    result[timeScaleLastIndex].end = subtractSecond(result[timeScaleLastIndex].end) as Date;\n  }\n  return result;\n};\n\nexport const availableViews: PureComputed<\n  [SchedulerView[], string, string], SchedulerView[]\n> = (views, viewName, viewDisplayName) => {\n  if (!views) return [{ name: viewName, displayName: viewDisplayName }];\n  if (views.findIndex(view => viewName === view.name) === -1) {\n    const nextViews = views.slice();\n    nextViews.push({ name: viewName, displayName: viewDisplayName });\n    return nextViews;\n  }\n  return views;\n};\n\nexport const viewCellsData: ViewCellsDataFn = (\n  currentDate, firstDayOfWeek,\n  dayCount, excludedDays,\n  startDayHour, endDayHour,\n  cellDuration, currTime,\n) => {\n  const days = dayScale(currentDate, firstDayOfWeek!, dayCount!, excludedDays);\n  const times = timeScale(\n    currentDate, firstDayOfWeek!, startDayHour, endDayHour, cellDuration, excludedDays,\n  );\n  const currentTime = moment(currTime as SchedulerDateTime);\n  return times.reduce((cellsAcc, time) => {\n    const start = moment(time.start);\n    const end = moment(time.end);\n    const rowCells = days.reduce((rowAcc, day) => {\n      const startDate = moment(day).hours(start.hours()).minutes(start.minutes()).toDate();\n      const endDate = moment(day).hours(end.hours()).minutes(end.minutes()).toDate();\n      const today = currentTime.isSame(startDate, 'day');\n      rowAcc.push({ startDate, endDate, today });\n      return rowAcc;\n    }, [] as ViewCell[]);\n    cellsAcc.push(rowCells);\n    return cellsAcc;\n  }, [] as ViewCell[][]);\n};\n\nexport const timeCellsData: PureComputed<\n  [ViewCell[][], number, number, number, number], ViewCell[][]\n> = (\n  cellsData, startDayHour, endDayHour, cellDuration, currentTime,\n) => {\n  const { startDate: firstViewDate } = cellsData[0][0];\n  if (!containsDSTChange(firstViewDate)) {\n    return cellsData;\n  }\n\n  const nextDay = moment(firstViewDate)\n    .add(1, 'day')\n    .toDate();\n  const validCellsData = viewCellsData(\n    nextDay, undefined, 1, [], startDayHour, endDayHour, cellDuration, currentTime,\n  );\n\n  return validCellsData;\n};\n\nexport const allDayCells: PureComputed<\n  [ViewCell[][]], AllDayCell[][]\n> = viewCells => [viewCells[0].map(cell => ({\n  startDate: moment(cell.startDate).startOf('day').toDate(),\n  endDate: moment(cell.startDate).add(1, 'day').startOf('day').toDate(),\n  groupingInfo: cell.groupingInfo,\n  endOfGroup: cell.endOfGroup,\n}))];\n\nexport const startViewDate: PureComputed<\n  [ViewCell[][]], Date\n> = viewCells => moment(viewCells[0][0].startDate).toDate();\n\nexport const endViewDate: PureComputed<\n  [ViewCell[][]], Date\n> = (viewCells) => {\n  const lastRowIndex = viewCells.length - 1;\n  const lastCellIndex = viewCells[lastRowIndex].length - 1;\n  return subtractSecond(viewCells[lastRowIndex][lastCellIndex].endDate!);\n};\n","import { PureComputed, CustomFunction } from '@devexpress/dx-core';\nimport {\n  ViewCell, CellElementsMeta, GroupOrientation, AppointmentMoment,\n  AppointmentUnwrappedGroup, ViewMetaData, ElementRect, AppointmentGroup,\n  AppointmentForestRoots, CalculatedTreeNode, TreeNodeWithOverlappingSubTreeRoots,\n  TreeNodeInBlock, AppointmentBlock, IncludedBlock, BlockWithChildren, CalculatedBlock,\n  GroupedIntoBlocksForest, AppointmentIndex,\n\n  VisitRootsFn, CalculateRectByDateAndGroupIntervalsFn, CreateAppointmentForestFn,\n  VisitChildFn, VisitAllChildrenFn, IsPossibleChildFn, FindMaxReduceValueFn,\n  CalculateAppointmentsMetaDataFn, CalulateRootsMetaDataFn, CalculateChildMetaDataFn,\n  CalculateChildrenMetaDataFn, CalculateAppointmentLeftAndWidthFn, PrepareToGroupIntoBlocksFn,\n  IsOverlappingSubTreeRootFn, FindChildrenMaxEndDateFn, GroupAppointmentsIntoBlocksFn,\n  CalculateBlockSizeBEndDateFn, FindBlockIndexByAppointmentFn, FindIncludedBlocksFn,\n  IsIncludedBlockFn, FindChildBlocksFn, IsChildBlockFn, AdjustByBlocksFn,\n  CalculateBlockDimensionsFn, AlignBlocksWithPreviousFn, AdjustAppointemntsByBlocksFn,\n  RedistributeBlocksFn, CalculateIncludedBlockMaxRightFn, CalculateBlocksTotalSizeFn,\n  CalculateSingleBlockTotalSizeFn, CalculateBlocksLeftLimitFn, CalculateSingleBlockLeftLimitFn,\n  UpdateBlocksProportionsFn, UpdateBlocksLeftFn, CreateAndAdjustAppointmentForestFn,\n} from '../../types';\nimport { HORIZONTAL_GROUP_ORIENTATION, HORIZONTAL_TYPE, VERTICAL_TYPE } from '../../constants';\nimport { toPercentage } from '../../utils';\nimport moment from 'moment';\n\nconst MAX_WIDTH = 1;\nconst INDIRECT_CHILD_LEFT_OFFSET = 0.05;\n\nexport const isAllDayElementsMetaActual: PureComputed<\n  [ViewCell[][], CellElementsMeta, GroupOrientation, number], boolean\n> = (viewCellsData, allDayElementsMeta, groupOrientation, groupCount) => {\n  const numberOfRows = groupOrientation === HORIZONTAL_GROUP_ORIENTATION ? 1 : groupCount;\n  return isElementsMetaActual(viewCellsData, allDayElementsMeta, numberOfRows);\n};\n\nexport const isTimeTableElementsMetaActual: PureComputed<\n  [ViewCell[][], CellElementsMeta], boolean\n> = (viewCellsData, timeTableElementsMeta) => isElementsMetaActual(\n  viewCellsData, timeTableElementsMeta, viewCellsData.length,\n);\n\nconst isElementsMetaActual: PureComputed<\n  [ViewCell[][], CellElementsMeta, number], boolean\n> = (viewCellsData, elementsMeta, numberOfRows) => {\n  if (!elementsMeta?.getCellRects) {\n    return false;\n  }\n\n  const tableSize = numberOfRows * viewCellsData[0].length;\n  return tableSize === elementsMeta.getCellRects.length;\n};\n\nconst appointmentHeightType = (appointment: AppointmentMoment, cellDuration: number) => {\n  const durationRatio = appointment.end.clone().diff(appointment.start, 'minutes') / cellDuration;\n  if (durationRatio === 1) return 'middle';\n  if (durationRatio > 1) return 'long';\n  return 'short';\n};\n\nconst horizontalRectCalculator: CustomFunction<\n  [AppointmentUnwrappedGroup, ViewMetaData, any], ElementRect\n> = (\n  appointment,\n  viewMetaData,\n  {\n    rectByDates: getRectByAppointment,\n    multiline,\n    rectByDatesMeta: {\n      cellElementsMeta,\n      viewCellsData,\n    },\n  },\n) => {\n  const {\n    top, left,\n    width, height, parentWidth,\n  } = getRectByAppointment(\n    appointment,\n    viewMetaData,\n    {\n      multiline,\n      cellElementsMeta,\n      viewCellsData,\n    },\n  );\n\n  return {\n    resources: appointment.resources,\n    top: top + ((height / appointment.reduceValue) * appointment.offset),\n    height: height / appointment.reduceValue,\n    left: toPercentage(left, parentWidth),\n    width: toPercentage(width, parentWidth),\n    dataItem: appointment.dataItem,\n    fromPrev: appointment.fromPrev,\n    toNext: appointment.toNext,\n    type: HORIZONTAL_TYPE,\n    key: appointment.key,\n  };\n};\n\nconst verticalRectCalculator: CustomFunction<\n  [AppointmentUnwrappedGroup, ViewMetaData, any], ElementRect\n> = (\n  appointment,\n  viewMetaData,\n  {\n    rectByDates: getRectByAppointment,\n    multiline,\n    rectByDatesMeta: {\n      viewCellsData,\n      cellDuration,\n      cellElementsMeta,\n      excludedDays,\n    },\n  },\n) => {\n  const {\n    top, left,\n    width, height, parentWidth,\n  } = getRectByAppointment(\n    appointment,\n    viewMetaData,\n    {\n      multiline,\n      viewCellsData,\n      cellDuration,\n      excludedDays,\n      cellElementsMeta,\n    },\n  );\n\n  const { offset, width: relativeWidth, left: relativeLeft  } = appointment;\n  const widthMultiplier = (relativeWidth! * 5 / 3 + relativeLeft!) <= 1 ? 5 / 3 : 1;\n  let validWidth = widthMultiplier === 5 / 3\n    ? widthMultiplier * relativeWidth! : relativeWidth! + 0.02;\n  if (validWidth + relativeLeft! > 1) {\n    validWidth = 1 - relativeLeft!;\n  }\n\n  return {\n    resources: appointment.resources,\n    top,\n    height,\n    left: toPercentage(left + relativeLeft! * width, parentWidth),\n    width: toPercentage(validWidth! * width, parentWidth),\n    dataItem: appointment.dataItem,\n    fromPrev: appointment.fromPrev,\n    toNext: appointment.toNext,\n    durationType: appointmentHeightType(appointment, cellDuration),\n    type: VERTICAL_TYPE,\n    offset,\n    key: appointment.key,\n  };\n};\n\nconst oldVerticalRectCalculator: CustomFunction<\n  [AppointmentUnwrappedGroup, ViewMetaData, any], ElementRect\n> = (\n  appointment,\n  viewMetaData,\n  {\n    rectByDates: getRectByAppointment,\n    multiline,\n    rectByDatesMeta: {\n      viewCellsData,\n      cellDuration,\n      cellElementsMeta,\n      excludedDays,\n      placeAppointmentsNextToEachOther,\n    },\n  },\n) => {\n  const {\n    top, left,\n    width, height, parentWidth,\n  } = getRectByAppointment(\n    appointment,\n    viewMetaData,\n    {\n      multiline,\n      viewCellsData,\n      cellDuration,\n      excludedDays,\n      cellElementsMeta,\n      placeAppointmentsNextToEachOther,\n    },\n  );\n\n  const widthInPx = width / appointment.reduceValue;\n\n  return {\n    resources: appointment.resources,\n    top,\n    height,\n    left: toPercentage(left + (widthInPx * appointment.offset), parentWidth),\n    width: toPercentage(widthInPx, parentWidth),\n    dataItem: appointment.dataItem,\n    fromPrev: appointment.fromPrev,\n    toNext: appointment.toNext,\n    durationType: appointmentHeightType(appointment, cellDuration),\n    type: VERTICAL_TYPE,\n    key: appointment.key,\n  };\n};\n\nconst compareByDay: PureComputed<\n  [AppointmentMoment, AppointmentMoment], number\n> = (first, second) => {\n  if (first.start.isBefore(second.start, 'day')) return -1;\n  if (first.start.isAfter(second.start, 'day')) return 1;\n  return 0;\n};\n\nconst compareByAllDay: PureComputed<\n  [AppointmentMoment, AppointmentMoment], number\n> = (first, second) => {\n  if (first.allDay && !second.allDay) return -1;\n  if (!first.allDay && second.allDay) return 1;\n  return 0;\n};\n\nconst compareByTime: PureComputed<\n  [AppointmentMoment, AppointmentMoment], number\n> = (first, second) => {\n  if (first.start.isBefore(second.start)) return -1;\n  if (first.start.isAfter(second.start)) return 1;\n  if (first.end.isBefore(second.end)) return 1;\n  if (first.end.isAfter(second.end)) return -1;\n  return 0;\n};\n\nexport const sortAppointments: PureComputed<\n  [AppointmentMoment[]], AppointmentMoment[]\n> = appointments => appointments\n  .slice().sort((a, b) => compareByDay(a, b) || compareByAllDay(a, b) || compareByTime(a, b));\n\nconst byDayPredicate: PureComputed<\n  [moment.Moment, moment.Moment], boolean\n> = (boundary, date) => (\n  boundary.isSameOrAfter(date, 'day')\n  && !boundary.isSame(boundary.clone().startOf('day'))\n);\n\nexport const findOverlappedAppointments: CustomFunction<\n  [AppointmentMoment[], boolean], any[]\n> = (sortedAppointments, byDay = false) => {\n  const appointments = sortedAppointments.slice();\n  const groups: AppointmentMoment[][] = [];\n  let totalIndex = 0;\n\n  while (totalIndex < appointments.length) {\n    groups.push([]);\n    const current = appointments[totalIndex];\n    const currentGroup = groups[groups.length - 1];\n    let next = appointments[totalIndex + 1];\n    let maxBoundary = current.end;\n\n    currentGroup.push(current);\n    totalIndex += 1;\n    while (next && (maxBoundary.isAfter(next.start)\n      || (byDay && byDayPredicate(maxBoundary, next.start)))) {\n      currentGroup.push(next);\n      if (maxBoundary.isBefore(next.end)) maxBoundary = next.end;\n      totalIndex += 1;\n      next = appointments[totalIndex];\n    }\n  }\n  return groups;\n};\n\nconst isMidnight: PureComputed<\n  [moment.Moment], boolean\n> = date => date.isSame(date.clone().startOf('day'));\n\nconst maxBoundaryPredicate: PureComputed<\n  [moment.Moment, Date], boolean\n> = (maxBoundary, startDate) => ((maxBoundary.isBefore(startDate as Date, 'day'))\n  || (isMidnight(maxBoundary) && maxBoundary.isSame(startDate as Date, 'day')));\n\nexport const calculateAppointmentOffsets: CustomFunction<\n  [any[], boolean], AppointmentGroup[]\n> = (groups, byDay = false) => groups.map((items) => {\n  let offset = 0;\n  let reduceValue = 1;\n  const appointments = items.map((appointment: any) => ({ ...appointment }));\n  const groupLength = appointments.length;\n  for (let startIndex = 0; startIndex < groupLength; startIndex += 1) {\n    const appointment = appointments[startIndex];\n    if (appointment.offset === undefined) {\n      let maxBoundary = appointment.end;\n      appointment.offset = offset;\n      for (let index = startIndex + 1; index < groupLength; index += 1) {\n        if (appointments[index].offset === undefined) {\n          if ((!byDay && maxBoundary.isSameOrBefore(appointments[index].start))\n            || (byDay && maxBoundaryPredicate(maxBoundary, appointments[index].start))) {\n            maxBoundary = appointments[index].end;\n            appointments[index].offset = offset;\n          }\n        }\n      }\n\n      offset += 1;\n      if (reduceValue < offset) reduceValue = offset;\n    }\n  }\n  return { items: appointments, reduceValue };\n});\n\nconst unwrapAppointmentForest: PureComputed<\n  [GroupedIntoBlocksForest[]], AppointmentUnwrappedGroup[]\n> = (appointmentForests) => {\n  const forestUnwrapped = appointmentForests.map(({ items, reduceValue }) => ({\n    reduceValue,\n    items: items.map(({ data }) => ({ ...data })),\n  }));\n  return unwrapGroups(forestUnwrapped);\n};\n\nexport const unwrapGroups: PureComputed<\n  [AppointmentGroup[]], AppointmentUnwrappedGroup[]\n> = groups => groups.reduce((acc, { items, reduceValue }) => {\n  acc.push(...items.map(({ start, end, dataItem, offset, resources, key, ...restProps }) => ({\n    start, end, dataItem, offset, reduceValue, resources,\n    fromPrev: moment(start).diff(dataItem.startDate, 'minutes') > 1,\n    toNext: moment(dataItem.endDate).diff(end, 'minutes') > 1,\n    key,\n    ...restProps,\n  })));\n  return acc;\n}, [] as AppointmentUnwrappedGroup[]);\n\nexport const intervalIncludes: PureComputed<\n  [moment.Moment, moment.Moment, moment.Moment], boolean\n> = (intervalStart, intervalEnd, date) => date\n  .isBetween(intervalStart, intervalEnd, undefined, '[)');\n\nexport const createAppointmentForest: CreateAppointmentForestFn = (\n  appointmentGroups, cellDuration,\n) => appointmentGroups.map((appointmentGroup) => {\n  const { items } = appointmentGroup;\n  let nextItems;\n  let roots;\n  if (items.length === 1) {\n    nextItems = [{\n      data: items[0], children: [], treeDepth: 0, isDirectChild: false, hasDirectChild: false,\n    }];\n    roots = [0];\n  } else {\n    const {\n      appointments, roots: appointmentTreeRoots,\n    } = visitRoots(items, cellDuration) as AppointmentForestRoots;\n    nextItems = appointments;\n    roots = appointmentTreeRoots;\n  }\n  return {\n    ...appointmentGroup,\n    items: nextItems,\n    roots,\n  };\n});\n\nconst visitRoots: VisitRootsFn = (appointmentItems, cellDuration) => {\n  const appointmentNodes: any[] = appointmentItems.map(props => ({\n    data: props,\n  }));\n\n  const roots = appointmentNodes.reduce((acc, appointment, appointmentIndex) => {\n    const { offset: appointmentOffset } = appointment.data;\n\n    if (appointmentOffset === 0) {\n      if (appointmentIndex + 1 === appointmentNodes.length) {\n        appointment.children = [];\n        appointment.hasDirectChild = false;\n        appointment.treeDepth = 0;\n      } else {\n        appointment.treeDepth = visitAllChildren(\n          appointmentNodes, appointmentIndex, cellDuration, 0,\n        );\n      }\n\n      appointment.parent = undefined;\n      appointment.isDirectChild = false;\n      return [...acc, appointmentIndex];\n    }\n    return acc;\n  }, []);\n  return { appointments: appointmentNodes, roots };\n};\n\nconst visitChild: VisitChildFn = (\n  appointmentNodes, index, parentAppointmentIndex, cellDuration, isDirectChild, treeDepth,\n) => {\n  const appointmentNode = appointmentNodes[index];\n  appointmentNode.isDirectChild = isDirectChild;\n  appointmentNode.parent = parentAppointmentIndex;\n  const nextTreeDepth = treeDepth + 1;\n  const { end } = appointmentNode.data;\n\n  if (index === appointmentNodes.length - 1\n    || end.isSameOrBefore(appointmentNodes[index + 1].data.start)) {\n    appointmentNode.children = [];\n    appointmentNode.treeDepth = 0;\n    appointmentNode.hasDirectChild = false;\n    return nextTreeDepth;\n  }\n\n  const calculatedTreeDepth = visitAllChildren(\n    appointmentNodes, index, cellDuration, treeDepth,\n  );\n\n  appointmentNode.treeDepth = calculatedTreeDepth;\n  return calculatedTreeDepth + 1;\n};\n\nconst visitAllChildren: VisitAllChildrenFn = (\n  appointmentNodes, appointmentIndex, cellDuration, treeDepth,\n) => {\n  const appointment = appointmentNodes[appointmentIndex];\n  const { end, offset: appointmentOffset, start } = appointment.data;\n  const directChildTimeLimit = moment(start).add(cellDuration, 'minutes');\n  let maxAppointmentTreeDepth = 0;\n  const children = [] as AppointmentIndex[];\n\n  let nextChildIndex = appointmentIndex + 1;\n  while (isPossibleChild(appointmentNodes, nextChildIndex, end, appointmentOffset)) {\n    const nextAppointment = appointmentNodes[nextChildIndex];\n    const { offset: nextOffset, start: nextStart } = nextAppointment.data;\n\n    if (nextOffset === appointmentOffset + 1) {\n      const isDirectChild = intervalIncludes(start, directChildTimeLimit, nextStart);\n      const nextTreeDepth = visitChild(\n        appointmentNodes, nextChildIndex, appointmentIndex, cellDuration, isDirectChild, treeDepth,\n      );\n\n      if (maxAppointmentTreeDepth < nextTreeDepth) {\n        maxAppointmentTreeDepth = nextTreeDepth;\n      }\n      children.push(nextChildIndex);\n    }\n    nextChildIndex += 1;\n  }\n  appointment.hasDirectChild = children.length !== 0 && appointmentNodes[children[0]].isDirectChild;\n  appointment.children = children;\n\n  return maxAppointmentTreeDepth;\n};\n\nexport const isPossibleChild: IsPossibleChildFn = (\n  appointments, possibleChildIndex, parentEnd, parentOffset,\n) => {\n  const possibleChild = appointments[possibleChildIndex];\n  return (\n    possibleChildIndex < appointments.length\n    && possibleChild.data.offset !== parentOffset\n    && possibleChild.data.start.isBefore(parentEnd)\n  );\n};\n\nexport const findMaxReduceValue: FindMaxReduceValueFn =\n  appointmentGroups => appointmentGroups.reduce((maxReduceValue, group) => {\n    const currentReduceValue = group.reduceValue;\n    return maxReduceValue > currentReduceValue ? maxReduceValue : currentReduceValue;\n  }, 1);\n\nexport const calculateAppointmentsMetaData: CalculateAppointmentsMetaDataFn = (\n  appointmentGroups, indirectChildLeftOffset,\n) => appointmentGroups.map((appointmentForest) => {\n  const { items, roots } = appointmentForest;\n  const firstNode = items[0];\n  return {\n    ...appointmentForest,\n    items: items.length === 1\n      ? [{\n        ...firstNode,\n        data: {\n          ...firstNode.data,\n          left: 0,\n          width: 1,\n        },\n      }]\n      : calculateRootsMetaData(items, roots, indirectChildLeftOffset) as CalculatedTreeNode[],\n  };\n});\n\nconst calculateRootsMetaData: CalulateRootsMetaDataFn = (\n  appointmentNodes, roots, indirectChildLeftOffset,\n) => {\n  const appointments = appointmentNodes.map(props => ({ ...props })) as CalculatedTreeNode[];\n\n  roots.forEach((appointmentIndex) => {\n    const appointment = appointments[appointmentIndex];\n    const { left, width } = calculateAppointmentLeftAndWidth(\n      appointments, undefined, appointment, MAX_WIDTH, indirectChildLeftOffset, undefined,\n    );\n    appointment.data.left = left;\n    appointment.data.width = width;\n    calculateChildrenMetaData(appointments, appointment, MAX_WIDTH, indirectChildLeftOffset);\n  });\n  return appointments;\n};\n\nconst calculateChildMetaData: CalculateChildMetaDataFn = (\n  appointmentNodes, appointmentIndex, maxWidth, indirectChildLeftOffset,\n) => {\n  const appointment = appointmentNodes[appointmentIndex];\n  const { left, width } = calculateAppointmentLeftAndWidth(\n    appointmentNodes, undefined, appointment, maxWidth, indirectChildLeftOffset, undefined,\n  );\n  appointment.data.left = left;\n  appointment.data.width = width;\n\n  calculateChildrenMetaData(\n    appointmentNodes, appointment, maxWidth, indirectChildLeftOffset,\n  );\n};\n\nconst calculateChildrenMetaData: CalculateChildrenMetaDataFn = (\n  appointmentNodes, appointmentNode, maxWidth, indirectChildLeftOffset,\n) => {\n  appointmentNode.children.forEach((childIndex) => {\n    calculateChildMetaData(appointmentNodes, childIndex, maxWidth, indirectChildLeftOffset);\n  });\n};\n\nexport const calculateAppointmentLeftAndWidth: CalculateAppointmentLeftAndWidthFn = (\n  appointmentNodes, blocks, appointmentNode, maxRight, indirectChildLeftOffset, defaultLeft,\n) => {\n  const {\n    hasDirectChild, treeDepth, isDirectChild, parent: parentIndex, children, blockIndex,\n  } = appointmentNode as TreeNodeInBlock;\n  const firstChild = appointmentNodes[children[0]];\n  const firstChildBlockIndex = (firstChild as TreeNodeInBlock)?.blockIndex;\n\n  const hasDirectChildAndInSameBlock = hasDirectChild\n    && (firstChildBlockIndex === undefined || (blockIndex === firstChildBlockIndex\n      || blocks![firstChildBlockIndex].includedInto === blockIndex\n      || maxRight === 1));\n\n  if (parentIndex === undefined) {\n    return ({\n      width: hasDirectChildAndInSameBlock ? maxRight / (treeDepth + 1) : maxRight,\n      left: 0,\n    });\n  }\n\n  const parent = appointmentNodes[parentIndex];\n  const {\n    width: parentWidth,\n    left: parentLeft,\n  } = parent.data;\n  const calculatedLeft = isDirectChild\n    ? parentLeft + parentWidth : parentLeft + indirectChildLeftOffset;\n  const left = defaultLeft !== undefined ? Math.max(defaultLeft, calculatedLeft) : calculatedLeft;\n  const unoccupiedSpace = maxRight - left;\n\n  return ({\n    width: hasDirectChildAndInSameBlock ? unoccupiedSpace / (treeDepth + 1) : unoccupiedSpace,\n    left,\n  });\n};\n\nexport const prepareToGroupIntoBlocks: PrepareToGroupIntoBlocksFn =\n  appointments => appointments.map((appointmentForest) => {\n    const { items: nodes } = appointmentForest;\n    const appointmentNodes = nodes.map(props => ({\n      ...props,\n    })) as TreeNodeWithOverlappingSubTreeRoots[];\n\n    appointmentNodes.forEach((appointmentNode, index) => {\n      if (index === 0) {\n        appointmentNode.overlappingSubTreeRoots = [];\n        return;\n      }\n      const overlappingSubTreeRoots = [] as any[];\n      const { offset: appointmentOffset, end } = appointmentNode.data;\n\n      let nextChildIndex = index + 1;\n      let currentBlockEnd;\n      while (isPossibleChild(appointmentNodes, nextChildIndex, end, appointmentOffset)) {\n        const nextAppointment = appointmentNodes[nextChildIndex];\n        if (nextAppointment.data.offset < appointmentOffset\n          && nextAppointment.maxOffset === undefined) {\n          nextAppointment.maxOffset = appointmentOffset;\n        }\n\n        const previousSubTreeRoot = overlappingSubTreeRoots.length > 0\n          ? appointmentNodes[overlappingSubTreeRoots[overlappingSubTreeRoots.length - 1]]\n          : undefined;\n        if (isOverlappingSubTreeRoot(\n          appointmentNode, nextAppointment, previousSubTreeRoot, currentBlockEnd,\n        )) {\n          overlappingSubTreeRoots.push(nextChildIndex);\n          nextAppointment.overlappingSubTreeRoot = true;\n          const maxChildDate = findChildrenMaxEndDate(appointmentNodes, nextAppointment);\n          if (!currentBlockEnd || currentBlockEnd.isBefore(maxChildDate)) {\n            currentBlockEnd = maxChildDate;\n          }\n        }\n        nextChildIndex += 1;\n      }\n      appointmentNode.overlappingSubTreeRoots = overlappingSubTreeRoots;\n    });\n    return {\n      ...appointmentForest,\n      items: appointmentNodes,\n    };\n  });\n\nexport const isOverlappingSubTreeRoot: IsOverlappingSubTreeRootFn = (\n  appointmentNode, nextAppointment, previousSubTreeRoot, previousEndDate,\n) => {\n  const {\n    overlappingSubTreeRoot, maxOffset, data: nextData,\n  } = nextAppointment;\n  const { offset: nextOffset, start: nextStart } = nextData;\n  const { offset } = appointmentNode.data;\n\n  return (\n    nextOffset < offset\n      && !overlappingSubTreeRoot\n      && (maxOffset === undefined || maxOffset >= offset)\n      && (!previousSubTreeRoot\n        || (previousSubTreeRoot.data.offset >= nextOffset\n        && nextStart.isSameOrAfter(previousEndDate)))\n  );\n};\n\nexport const findChildrenMaxEndDate: FindChildrenMaxEndDateFn = (\n  appointmentNodes, appointmentNode,\n) => {\n  const { children, data } = appointmentNode;\n  const { end } = data;\n\n  const maxDate = children.reduce((currentMaxDate, childIndex) => {\n    const child = appointmentNodes[childIndex];\n    const maxChildrenDate = findChildrenMaxEndDate(appointmentNodes, child);\n    if (maxChildrenDate.isAfter(currentMaxDate)) {\n      return maxChildrenDate;\n    }\n    return currentMaxDate;\n  }, end);\n  return maxDate;\n};\n\nexport const groupAppointmentsIntoBlocks: GroupAppointmentsIntoBlocksFn =\n  appointmentForests => appointmentForests.map((appointmentForest) => {\n    const { items, reduceValue } = appointmentForest;\n    const { blocks: nextBlocks, appointments } = items.reduce((acc, appointment, index) => {\n      const blocks = acc.blocks.slice();\n      const {\n        treeDepth, data, overlappingSubTreeRoots,\n      } = appointment;\n      const { offset, start, end } = data;\n      let blockIndex = findBlockIndexByAppointment(blocks, appointment);\n\n      if (blockIndex < 0) {\n        blocks.push({\n          start, end, minOffset: offset, maxOffset: offset + treeDepth,\n          size: treeDepth + 1, items: [], endForChildren: end,\n        });\n        blockIndex = blocks.length - 1;\n      }\n\n      blocks[blockIndex].items.push(index);\n\n      overlappingSubTreeRoots.forEach((subTreeRootIndex) => {\n        const subTreeRoot = items[subTreeRootIndex];\n        const { data: subTreeRootData } = subTreeRoot;\n        blocks.push({\n          start: subTreeRootData.start, end,\n          minOffset: subTreeRootData.offset, maxOffset: offset - 1,\n          size: calculateBlockSizeByEndDate(items, subTreeRoot, end), items: [],\n          endForChildren: subTreeRootData.end,\n        });\n      });\n      const appointmentInBlock = { ...appointment, blockIndex };\n\n      return {\n        blocks,\n        appointments: [...acc.appointments, appointmentInBlock],\n      };\n    }, {\n      blocks: [{\n        start: items[0].data.start,\n        end: items[0].data.end,\n        minOffset: 0,\n        maxOffset: reduceValue - 1,\n        size: reduceValue,\n        items: [],\n        endForChildren: items[0].data.end,\n      }] as AppointmentBlock[],\n      appointments: [] as TreeNodeInBlock[],\n    });\n    return {\n      blocks: nextBlocks,\n      appointmentForest: {\n        ...appointmentForest,\n        items: appointments,\n      },\n    };\n  });\n\nconst calculateBlockSizeByEndDate: CalculateBlockSizeBEndDateFn = (\n  appointmentNodes, subTreeRoot, blockEndDate,\n) => {\n  const { children, data } = subTreeRoot;\n  const { start } = data;\n\n  if (children.length === 0) {\n    if (blockEndDate.isAfter(start)) {\n      return 1;\n    }\n    return 0;\n  }\n  const maxSize = Math.max(\n    ...children.map(childIndex => calculateBlockSizeByEndDate(\n      appointmentNodes, appointmentNodes[childIndex], blockEndDate),\n    ),\n  );\n\n  if (blockEndDate.isSameOrBefore(start) && maxSize === 0) {\n    return 0;\n  }\n  return maxSize + 1;\n};\n\nexport const findBlockIndexByAppointment: FindBlockIndexByAppointmentFn = (\n  blocks, appointment,\n) => {\n  const { start, offset } = appointment.data;\n\n  let blockIndex = blocks.length - 1;\n  while (blockIndex >= 0) {\n    const currentBlock = blocks[blockIndex];\n    if (intervalIncludes(currentBlock.start, currentBlock.end, start)\n      && offset >= currentBlock.minOffset && offset <= currentBlock.maxOffset &&\n      (!appointment.overlappingSubTreeRoot ||\n        appointment.overlappingSubTreeRoot && !currentBlock.items.length)\n    ) {\n      break;\n    }\n    blockIndex -= 1;\n  }\n\n  return blockIndex;\n};\n\nexport const findIncludedBlocks: FindIncludedBlocksFn = (groupedIntoBlocks) => {\n  return groupedIntoBlocks.map(({ blocks, appointmentForest }) => {\n    const nextBlocks = blocks.map(props => ({ ...props })) as IncludedBlock[];\n\n    nextBlocks.forEach((block, blockIndex) => {\n      block.includedBlocks = [];\n      for (\n        let currentBlockIndex = blockIndex + 1;\n        currentBlockIndex < nextBlocks.length;\n        currentBlockIndex += 1\n      ) {\n        const currentBlock = nextBlocks[currentBlockIndex];\n        if (isIncludedBlock(block, currentBlock)) {\n          block.includedBlocks.push(currentBlockIndex);\n          currentBlock.includedInto = blockIndex;\n        }\n      }\n    });\n    return {\n      blocks: nextBlocks, appointmentForest,\n    };\n  });\n};\n\nconst isIncludedBlock: IsIncludedBlockFn = (block, possibleIncludedBlock) => {\n  const { start, end, minOffset, maxOffset } = block;\n  const {\n    start: possibleIncludedStart, end: possibleIncludedEnd,\n    minOffset: possibleMinOffset, maxOffset: possibleMaxOffset,\n  } = possibleIncludedBlock;\n  return intervalIncludes(start, end, possibleIncludedStart)\n    && intervalIncludes(start, end, possibleIncludedEnd)\n    && possibleMaxOffset <= maxOffset && possibleMinOffset >= minOffset;\n};\n\nexport const findChildBlocks: FindChildBlocksFn = (groupedIntoBlocks) => {\n  return groupedIntoBlocks.map(({ blocks, appointmentForest }) => {\n    const nextBlocks = blocks.map(props => ({ ...props })) as BlockWithChildren[];\n\n    nextBlocks.forEach((block, index) => {\n      block.children = [];\n      for (let currentIndex = index + 1; currentIndex < nextBlocks.length; currentIndex += 1) {\n        const nextBlock = nextBlocks[currentIndex];\n\n        if (isChildBlock(block, nextBlock)) {\n          block.children.push(currentIndex);\n          nextBlock.parent = index;\n        }\n      }\n      return block;\n    });\n    return {\n      appointmentForest, blocks: nextBlocks,\n    };\n  });\n};\n\nconst isChildBlock: IsChildBlockFn = (block, possibleChildBlock) => {\n  const { start, endForChildren, minOffset, includedInto } = block;\n  const {\n    start: childStart, includedInto: childIncludedInto, maxOffset: childMaxOffset,\n  } = possibleChildBlock;\n  return intervalIncludes(start, endForChildren, childStart)\n    && childMaxOffset + 1 === minOffset\n    && (\n      childIncludedInto === undefined\n      || childIncludedInto === includedInto\n    );\n};\n\nexport const adjustByBlocks: AdjustByBlocksFn = (\n  groupedIntoBlocks, indirectChildLeftOffset,\n) => {\n  const updatedBlocks = groupedIntoBlocks.map(({ blocks, appointmentForest }) => {\n    const dimensionsCalculated = calculateBlocksDimensions(blocks, appointmentForest.items);\n\n    return {\n      blocks: alignBlocksWithPrevious(dimensionsCalculated, appointmentForest.items),\n      appointmentForest,\n    };\n  });\n  const adjustedByBlocks = updatedBlocks.map(({ blocks, appointmentForest }) => {\n    return {\n      ...appointmentForest,\n      items: adjustAppointmentsByBlocks(\n        appointmentForest.items, blocks, indirectChildLeftOffset,\n        ) as TreeNodeInBlock[],\n    };\n  });\n  return adjustedByBlocks;\n};\n\nconst calculateBlocksDimensions: CalculateBlockDimensionsFn = (\n  blocks, appointments,\n) => updateBlocksProportions(calculateBlocksLeftLimit(\n  calculateBlocksTotalSize(blocks), appointments,\n));\n\nconst alignBlocksWithPrevious: AlignBlocksWithPreviousFn = (blocks, appointments) => {\n  const nextBlocks = blocks.map(({ right, ...restProps }) => ({ ...restProps }));\n\n  const leftLimitCalculated = calculateBlocksLeftLimit(\n    updateBlocksLeft(nextBlocks as CalculatedBlock[], appointments), appointments,\n  );\n  return updateBlocksProportions(leftLimitCalculated);\n};\n\nconst adjustAppointmentsByBlocks: AdjustAppointemntsByBlocksFn = (\n  appointments, blocks, indirectChildLeftOffset,\n) => {\n  const nextAppointments = appointments.map(props => ({ ...props }));\n  const nextBlocks = blocks.map(props => ({ ...props }));\n\n  nextBlocks.forEach((block, index) => {\n    if (index !== 0) {\n      const { items, left: blockLeft, right, children } = block;\n      const maxRight = calculateIncludedBlockMaxRight(nextBlocks, block);\n      const finalMaxRight = maxRight * right;\n      const defaultLeft = blockLeft! * maxRight;\n\n      items.forEach((appointmentIndex, itemIndex) => {\n        const appointment = nextAppointments[appointmentIndex];\n        if (itemIndex === 0) {\n          const { left, width } = calculateAppointmentLeftAndWidth(\n            nextAppointments, nextBlocks, appointment,\n            finalMaxRight, indirectChildLeftOffset, defaultLeft,\n          );\n          appointment.data.left = left;\n          appointment.data.width = width;\n          if (defaultLeft !== left) {\n            children.forEach((childIndex) => {\n              redistributeChildBlocks(nextBlocks, childIndex, left / maxRight);\n            });\n          }\n        } else {\n          const {\n            left, width,\n          } = calculateAppointmentLeftAndWidth(\n            nextAppointments, nextBlocks, appointment,\n            finalMaxRight, indirectChildLeftOffset, undefined,\n          );\n          appointment.data.left = left;\n          appointment.data.width = width;\n        }\n      });\n    }\n  });\n  blocks[0].items.forEach((appointmentIndex) => {\n    const appointment = nextAppointments[appointmentIndex];\n    const {\n      left, width,\n    } = calculateAppointmentLeftAndWidth(\n      nextAppointments, blocks, appointment, 1, indirectChildLeftOffset, undefined,\n    );\n    appointment.data.left = left;\n    appointment.data.width = width;\n  });\n  return nextAppointments;\n};\n\nconst redistributeChildBlocks: RedistributeBlocksFn = (blocks, blockIndex, right) => {\n  const block = blocks[blockIndex];\n  const { leftOffset, size, leftLimit, children } = block;\n  block.right = right;\n  const width = size + leftOffset;\n  const relativeWidth = right - leftLimit;\n  const left = right - relativeWidth * size / width;\n  block.left = left;\n  children.forEach((childIndex) => {\n    redistributeChildBlocks(blocks, childIndex, left);\n  });\n};\n\nexport const calculateIncludedBlockMaxRight: CalculateIncludedBlockMaxRightFn = (\n  blocks, includedBlock,\n) => {\n  const { includedInto: includedIntoIndex } = includedBlock;\n  if (includedIntoIndex === undefined) {\n    return 1;\n  }\n\n  const includedInto = blocks[includedIntoIndex];\n  const currentMaxRight = includedInto.right;\n  return currentMaxRight * calculateIncludedBlockMaxRight(blocks, includedInto);\n\n};\n\nexport const calculateBlocksTotalSize: CalculateBlocksTotalSizeFn = (blocks) => {\n  const result = blocks.map((block) => {\n    const totalSize = calculateSingleBlockTotalSize(blocks, block);\n    return {\n      ...block,\n      totalSize,\n      leftOffset: totalSize - block.size,\n    };\n  });\n  return result;\n};\n\nconst calculateSingleBlockTotalSize: CalculateSingleBlockTotalSizeFn = (\n  blocks, block,\n) => {\n  const { children, size } = block;\n  if (children.length === 0) {\n    return size;\n  }\n  return Math.max(\n    ...children.map(childIndex => calculateSingleBlockTotalSize(blocks, blocks[childIndex])),\n  ) + size;\n};\n\nexport const calculateBlocksLeftLimit: CalculateBlocksLeftLimitFn = (\n  blocks, appointments,\n) => (blocks as CalculatedBlock[]).map((block) => {\n  const leftLimit = calculateSingleBlockLeftLimit(blocks, appointments, block);\n  return {\n    ...block,\n    leftLimit,\n  };\n});\n\nconst calculateSingleBlockLeftLimit: CalculateSingleBlockLeftLimitFn = (\n  blocks, appointments, block,\n) => {\n  const { children, items, left } = block as CalculatedBlock;\n  if (children.length === 0) {\n    return left !== undefined\n      ? Math.min(left, appointments[items[0]].data.left)\n      : appointments[items[0]].data.left;\n  }\n  return Math.min(\n    ...children.map(childIndex => calculateSingleBlockLeftLimit(\n      blocks, appointments, blocks[childIndex],\n    )),\n  );\n};\n\nexport const updateBlocksProportions: UpdateBlocksProportionsFn = (blocks) => {\n  const nextBlocks = (blocks as CalculatedBlock[]).map(props => ({ ...props }));\n\n  nextBlocks.forEach((block) => {\n    const { parent: parentIndex, leftLimit, leftOffset, totalSize } = block;\n    if (parentIndex === undefined) {\n      block.right = 1;\n      block.left = (1 - leftLimit) * leftOffset / totalSize + leftLimit;\n      return;\n    }\n\n    const parent = nextBlocks[parentIndex];\n    const { left: parentLeft, totalSize: parentTotalSize } = parent as CalculatedBlock;\n    block.totalSize = parentTotalSize;\n    block.right = parentLeft as number;\n    block.left = (1 - leftLimit) * leftOffset / parentTotalSize + leftLimit;\n  });\n\n  return nextBlocks;\n};\n\nexport const updateBlocksLeft: UpdateBlocksLeftFn = (\n  blocks, appointments,\n) => blocks.map((block) => {\n  const { items, left } = block;\n  const firstItem = appointments[items[0]];\n  const { parent: firstItemParentIndex } = firstItem;\n  if (firstItemParentIndex === undefined) {\n    return block;\n  }\n\n  const firstItemParent = appointments[firstItemParentIndex];\n  const parentBlock = blocks[firstItemParent.blockIndex];\n\n  return {\n    ...block,\n    left: parentBlock.parent === undefined ? left : blocks[parentBlock.parent].left,\n  };\n});\n\nconst createAndAdjustAppointmentForest: CreateAndAdjustAppointmentForestFn = (\n  appointmentGroups, cellDuration,\n) => {\n  const appointmentForest = createAppointmentForest(appointmentGroups, cellDuration);\n  const indirectChildLeftOffset = Math.min(\n    1 / findMaxReduceValue(appointmentForest),\n    INDIRECT_CHILD_LEFT_OFFSET,\n  );\n  const baseCalculated = calculateAppointmentsMetaData(\n    appointmentForest, indirectChildLeftOffset,\n  );\n\n  const preparedToGroupIntoBlocks = prepareToGroupIntoBlocks(baseCalculated);\n  const groupedIntoBlocks = groupAppointmentsIntoBlocks(preparedToGroupIntoBlocks);\n  const blocksWithIncluded = findIncludedBlocks(groupedIntoBlocks);\n  const blocksWithParents = findChildBlocks(blocksWithIncluded);\n  return adjustByBlocks(blocksWithParents, indirectChildLeftOffset);\n};\n\nexport const calculateRectByDateAndGroupIntervals: CalculateRectByDateAndGroupIntervalsFn = (\n  type, intervals, rectByDates, rectByDatesMeta, viewMetaData,\n) => {\n  const { growDirection, multiline } = type;\n  const isHorizontal = growDirection === HORIZONTAL_TYPE;\n\n  const sorted = intervals.map(sortAppointments);\n  const grouped = sorted.reduce(((acc, sortedGroup) => [\n    ...acc,\n    ...findOverlappedAppointments(sortedGroup as AppointmentMoment[], isHorizontal),\n  ]), [] as AppointmentMoment[]);\n\n  const { cellDuration, placeAppointmentsNextToEachOther } = rectByDatesMeta;\n  const rectCalculator = isHorizontal\n    ? horizontalRectCalculator\n    : placeAppointmentsNextToEachOther ? oldVerticalRectCalculator : verticalRectCalculator;\n\n  const groupsCalculated = calculateAppointmentOffsets(\n    grouped as any[], isHorizontal,\n  );\n  const isAppointmentForestNeeded = !isHorizontal && !placeAppointmentsNextToEachOther;\n  let appointmentForest: GroupedIntoBlocksForest[];\n\n  if (isAppointmentForestNeeded) {\n    appointmentForest = createAndAdjustAppointmentForest(\n      groupsCalculated as AppointmentGroup[], cellDuration,\n    ) as GroupedIntoBlocksForest[];\n  }\n\n  const unwrappedAppointments = isAppointmentForestNeeded\n    ? unwrapAppointmentForest(appointmentForest!)\n    : unwrapGroups(groupsCalculated);\n  const rects = unwrappedAppointments.map(appointment => rectCalculator(\n    appointment, viewMetaData,\n    { rectByDates, multiline, rectByDatesMeta },\n  ));\n  return rects.sort((first, second) => first.offset! >= second.offset! ? 1 : -1);\n};\n","import moment from 'moment';\nimport { PureComputed } from '@devexpress/dx-core';\nimport {\n  AppointmentMoment, DayBoundaryPredicateFn,\n  ReduceAppointmentByDayBoundsFn, NormalizeAppointmentDurationFn, ViewCell, SchedulerDateTime,\n} from '../../types';\nimport { checkCellGroupingInfo } from '../common/helpers';\nimport { addDateToKey } from '../../utils';\n\nexport const sliceAppointmentByDay: PureComputed<\n  [AppointmentMoment, number], AppointmentMoment[]\n> = (appointment, cellDuration) => {\n  const { start, end, dataItem, key } = appointment;\n  if (start.isSame(end, 'day')) return [appointment];\n\n  const minDuration = cellDuration / 2;\n  const isShortOnFirstDay = start.clone().endOf('day').diff(start, 'minutes') < minDuration;\n  const isShortOnSecondDay = end.clone().diff(end.clone().startOf('day'), 'minutes') < minDuration;\n  const firstAppointmentKey = addDateToKey(key, start);\n  const secondAppointmentKey = addDateToKey(key, end);\n\n  return [\n    isShortOnFirstDay ? {\n      start: start.clone().endOf('day').add(-minDuration, 'minutes'),\n      end: start.clone().endOf('day'),\n      dataItem,\n      key: firstAppointmentKey,\n    } : {\n      start, end: start.clone().endOf('day'), dataItem,\n      key: firstAppointmentKey,\n    },\n    isShortOnSecondDay ? {\n      start: end.clone().startOf('day'),\n      end: end.clone().startOf('day').add(minDuration, 'minutes'),\n      dataItem,\n      key: secondAppointmentKey,\n    } : {\n      start: end.clone().startOf('day'), end, dataItem,\n      key: secondAppointmentKey,\n    },\n  ];\n};\n\nexport const dayBoundaryPredicate: DayBoundaryPredicateFn = (\n  appointment,\n  leftBound, rightBound,\n  excludedDays = [],\n) => {\n  const dayStart = moment(leftBound as Date);\n  const dayEnd = moment(rightBound as Date);\n  const startDayTime = moment(appointment.start)\n    .hour(dayStart.hour())\n    .minutes(dayStart.minutes());\n  const endDayTime = moment(appointment.start)\n    .hour(dayEnd.hour())\n    .minutes(dayEnd.minutes());\n\n  if (appointment.end.isBefore(dayStart) || appointment.start.isAfter(dayEnd)) return false;\n  if (excludedDays.findIndex(day => day === moment(appointment.start).day()) !== -1) return false;\n  return (appointment.end.isAfter(startDayTime)\n    && appointment.start.isBefore(endDayTime));\n};\n\nexport const reduceAppointmentByDayBounds: ReduceAppointmentByDayBoundsFn = (\n  appointment, leftBound, rightBound, cellDuration,\n) => {\n  const dayStart = moment(leftBound as Date);\n  const dayEnd = moment(rightBound as Date);\n  const startDayTime = moment(appointment.start)\n    .hour(dayStart.hour())\n    .minutes(dayStart.minutes())\n    .seconds(dayStart.seconds());\n  const endDayTime = moment(appointment.start)\n    .hour(dayEnd.hour())\n    .minutes(dayEnd.minutes())\n    .seconds(dayEnd.seconds());\n\n  const minDuration = cellDuration / 2;\n  const isShortOnFirstDay = endDayTime.clone().diff(appointment.start, 'minutes') < minDuration;\n  const isShortOnSecondDay = appointment.end.clone().diff(startDayTime, 'minutes') < minDuration;\n\n  if (isShortOnFirstDay) {\n    return {\n      ...appointment, start: endDayTime.clone().add(-minDuration, 'minutes'), end: endDayTime,\n    };\n  }\n\n  if (isShortOnSecondDay) {\n    return {\n      ...appointment, start: startDayTime, end: startDayTime.clone().add(minDuration, 'minutes'),\n    };\n  }\n\n  return {\n    ...appointment,\n    ...(appointment.start.isSameOrBefore(startDayTime) ? { start: startDayTime } : null),\n    ...(appointment.end.isSameOrAfter(endDayTime) ? { end: endDayTime } : null),\n  };\n};\n\nexport const normalizeAppointmentDuration: NormalizeAppointmentDurationFn = (\n  appointment, cellDuration,\n) => {\n  const minDuration = cellDuration / 2;\n  const start = moment(appointment.start as Date);\n  const end = moment(appointment.end as Date);\n\n  if (end.diff(start, 'minutes') > minDuration) {\n    return { ...appointment, start, end };\n  }\n\n  if (end.isSame(start.clone().add(minDuration, 'minutes'), 'day')) {\n    return { ...appointment, start, end: start.clone().add(minDuration, 'minutes') };\n  }\n\n  return {\n    ...appointment,\n    start: start.clone().endOf('day').add(-minDuration, 'minutes'),\n    end: start.clone().endOf('day'),\n  };\n};\n\nexport const getWeekVerticallyGroupedColumnIndex: PureComputed<\n  [ViewCell[][], SchedulerDateTime], number\n> = (viewCellsData, date) =>  viewCellsData[0].findIndex((\n  timeCell: ViewCell,\n) => moment(date as SchedulerDateTime).isSame(timeCell.startDate, 'date'));\n\nexport const getWeekHorizontallyGroupedColumnIndex: PureComputed<\n  [ViewCell[][], AppointmentMoment, SchedulerDateTime], number\n> = (viewCellsData, appointment, date) => viewCellsData[0].findIndex((timeCell: ViewCell) => {\n  const isCorrectGroup = checkCellGroupingInfo(timeCell, appointment);\n  return moment(date as SchedulerDateTime).isSame(timeCell.startDate, 'date') && isCorrectGroup;\n});\n\nexport const getWeekVerticallyGroupedRowIndex: PureComputed<\n  [ViewCell[][], AppointmentMoment, SchedulerDateTime, number, boolean, number], number\n> = (viewCellsData, appointment, date, columnIndex, takePrev, groupCount) => {\n  const timeTableHeight = viewCellsData.length / groupCount;\n  let timeTableRowIndex = getWeekHorizontallyGroupedRowIndex(\n    viewCellsData, date, columnIndex, takePrev,\n  );\n\n  if (!viewCellsData[0][0].groupingInfo) return timeTableRowIndex;\n\n  let isWrongCell = !checkCellGroupingInfo(\n    viewCellsData[timeTableRowIndex][columnIndex], appointment,\n  );\n  while (isWrongCell) {\n    timeTableRowIndex += timeTableHeight;\n    isWrongCell = !checkCellGroupingInfo(\n      viewCellsData[timeTableRowIndex][columnIndex], appointment,\n    );\n  }\n  return timeTableRowIndex;\n};\n\nexport const getWeekHorizontallyGroupedRowIndex: PureComputed<\n  [ViewCell[][], SchedulerDateTime, number, boolean], number\n> = (viewCellsData, date, columnIndex, takePrev) => viewCellsData.findIndex(\n  timeCell => moment(date as SchedulerDateTime)\n    .isBetween(\n      timeCell[columnIndex].startDate,\n      timeCell[columnIndex].endDate,\n      'seconds',\n      takePrev ? '(]' : '[)'),\n    );\n","import { CalculateWeekDateIntervalsFn, AppointmentMoment } from '../../types';\nimport {\n  sliceAppointmentByDay, dayBoundaryPredicate, reduceAppointmentByDayBounds,\n  normalizeAppointmentDuration,\n} from './helpers';\nimport { filterByViewBoundaries } from '../../utils';\n\nexport const calculateWeekDateIntervals: CalculateWeekDateIntervalsFn = (\n  appointments,\n  leftBound, rightBound, // startViewDate, endViewDate\n  excludedDays,\n  cellDuration,\n) => [\n  appointments\n    .map(appointment => normalizeAppointmentDuration(appointment, cellDuration))\n    .reduce((acc, appointment) =>\n      [...acc, ...filterByViewBoundaries(appointment, leftBound, rightBound, excludedDays, true)],\n      [] as AppointmentMoment[],\n    )\n    .reduce((acc, appointment) => (\n      [...acc, ...sliceAppointmentByDay(appointment, cellDuration)]), [] as AppointmentMoment[],\n    )\n    .filter(appointment => dayBoundaryPredicate(appointment, leftBound, rightBound, excludedDays))\n    .map(appointment => reduceAppointmentByDayBounds(\n      appointment, leftBound, rightBound, cellDuration,\n    )),\n];\n","import moment from 'moment';\nimport {\n  GetCellByAppointmentDataFn, GetVerticalRectByAppointmentDataFn,\n  GetCellRectVerticalFn, SchedulerDateTime,\n} from '../../types';\nimport { VERTICAL_GROUP_ORIENTATION } from '../../constants';\nimport {\n  getWeekHorizontallyGroupedRowIndex, getWeekVerticallyGroupedRowIndex,\n  getWeekHorizontallyGroupedColumnIndex, getWeekVerticallyGroupedColumnIndex,\n} from '../week-view/helpers';\n\nconst CELL_GAP_PX = 10;\nconst CELL_BOUND_HORIZONTAL_OFFSET_PX = 1;\nconst CELL_BOUND_VERTICAL_OFFSET_PX = 4;\n\nexport const getVerticalCellIndexByAppointmentData: GetCellByAppointmentDataFn = (\n  appointment, viewCellsData, viewMetaData, date, takePrev = false,\n) => {\n  const { groupOrientation, groupCount } = viewMetaData;\n\n  const columnIndex = groupOrientation === VERTICAL_GROUP_ORIENTATION\n    ? getWeekVerticallyGroupedColumnIndex(viewCellsData, date)\n    : getWeekHorizontallyGroupedColumnIndex(viewCellsData, appointment, date);\n  const rowIndex = groupOrientation === VERTICAL_GROUP_ORIENTATION\n    ? getWeekVerticallyGroupedRowIndex(\n      viewCellsData, appointment, date, columnIndex, takePrev, groupCount,\n    ) : getWeekHorizontallyGroupedRowIndex(viewCellsData, date, columnIndex, takePrev);\n\n  const cellIndex = (rowIndex * viewCellsData[0].length) + columnIndex;\n  return {\n    index: cellIndex,\n    startDate: viewCellsData[rowIndex][columnIndex].startDate,\n  };\n};\n\nconst getCellRect: GetCellRectVerticalFn = (\n  date, appointment, viewCellsData, cellDuration,\n  cellElementsMeta, takePrev, viewMetaData,\n) => {\n  const {\n    index: cellIndex,\n    startDate: cellStartDate,\n  } = getVerticalCellIndexByAppointmentData(\n    appointment, viewCellsData, viewMetaData, date, takePrev,\n  );\n\n  const {\n    top,\n    left,\n    width,\n    height: cellHeight,\n  } = cellElementsMeta.getCellRects[cellIndex]();\n  const timeOffset = moment(date as SchedulerDateTime).diff(cellStartDate as Date, 'minutes');\n  const topOffset = cellHeight * (timeOffset / cellDuration);\n  const parentRect = cellElementsMeta.parentRect();\n\n  return {\n    top,\n    left,\n    width,\n    topOffset,\n    parentRect,\n  };\n};\n\nexport const getVerticalRectByAppointmentData: GetVerticalRectByAppointmentDataFn = (\n  appointment,\n  viewMetaData,\n  {\n    viewCellsData,\n    cellDuration,\n    cellElementsMeta,\n    placeAppointmentsNextToEachOther,\n  },\n) => {\n  const firstCellRect = getCellRect(\n    appointment.start.toDate(), appointment, viewCellsData,\n    cellDuration, cellElementsMeta, false, viewMetaData,\n  );\n  const lastCellRect = getCellRect(\n    appointment.end.toDate(), appointment, viewCellsData,\n    cellDuration, cellElementsMeta, true, viewMetaData,\n  );\n\n  const top = firstCellRect.top + firstCellRect.topOffset;\n  const height = (lastCellRect.top + lastCellRect.topOffset) - top;\n\n  return {\n    width: firstCellRect.width - CELL_GAP_PX - CELL_BOUND_HORIZONTAL_OFFSET_PX,\n    top: top - firstCellRect.parentRect.top + CELL_BOUND_HORIZONTAL_OFFSET_PX,\n    left: firstCellRect.left - firstCellRect.parentRect.left + CELL_BOUND_HORIZONTAL_OFFSET_PX,\n    parentWidth: firstCellRect.parentRect.width,\n    height: placeAppointmentsNextToEachOther ? height - CELL_BOUND_VERTICAL_OFFSET_PX : height,\n  };\n};\n","import moment from 'moment';\nimport { PureComputed } from '@devexpress/dx-core';\nimport {\n  AppointmentMoment, GetAllDayCellIndexByAppointmentDataFn,\n  SliceAppointmentsByBoundariesFn, SchedulerDateTime, ViewCell,\n} from '../../types';\nimport { HORIZONTAL_GROUP_ORIENTATION } from '../../constants';\nimport { checkCellGroupingInfo } from '../common/helpers';\n\nexport const allDayPredicate: PureComputed<[AppointmentMoment], boolean> = appointment => (\n  appointment.end.diff(appointment.start, 'hours') > 23\n  || !!appointment.allDay\n);\n\nexport const getAllDayCellIndexByAppointmentData: GetAllDayCellIndexByAppointmentDataFn = (\n  viewCellsData, viewMetaData, date, appointment, takePrev,\n) => {\n  const currentDate = moment(date as SchedulerDateTime);\n  const { groupOrientation, groupCount } = viewMetaData;\n\n  const columnIndex = groupOrientation === HORIZONTAL_GROUP_ORIENTATION\n    ? getAllDayHorizontallyGroupedColumnIndex(viewCellsData, currentDate, appointment)\n    : getAllDayVerticallyGroupedColumnIndex(viewCellsData, currentDate);\n  const rowIndex = groupOrientation === HORIZONTAL_GROUP_ORIENTATION\n    ? 0 : getAllDayVerticallyGroupedRowIndex(viewCellsData, appointment, groupCount);\n\n  let cellIndex = rowIndex * viewCellsData[0].length + columnIndex;\n  if (takePrev && currentDate.format() === currentDate.startOf('day').format()) {\n    cellIndex -= 1;\n  }\n  return cellIndex;\n};\n\nexport const getAllDayVerticallyGroupedColumnIndex: PureComputed<\n  [ViewCell[][], moment.Moment], number\n> = (viewCellsData, date) => viewCellsData[0].findIndex((timeCell) => {\n  return date.isSame(timeCell.startDate, 'date');\n});\n\nexport const getAllDayHorizontallyGroupedColumnIndex: PureComputed<\n  [ViewCell[][], moment.Moment, AppointmentMoment], number\n> = (viewCellsData, date, appointment) => viewCellsData[0].findIndex(timeCell => (\n  date.isSame(timeCell.startDate, 'date') && checkCellGroupingInfo(timeCell, appointment)\n));\n\nexport const getAllDayVerticallyGroupedRowIndex: PureComputed<\n  [ViewCell[][], AppointmentMoment, number], number\n> = (viewCellsData, appointment, groupCount) => {\n  const index = viewCellsData.findIndex(viewCellsDataRow => checkCellGroupingInfo(\n    viewCellsDataRow[0], appointment,\n  ));\n  return index * groupCount / viewCellsData.length;\n};\n\nexport const sliceAppointmentsByBoundaries: SliceAppointmentsByBoundariesFn = (\n  appointment, left, right, excludedDays = [],\n) => {\n  const startDate = appointment.start.clone();\n  const endDate = appointment.end.clone();\n  let nextStart = startDate.clone();\n  let nextEnd = endDate.clone();\n\n  if (startDate.isBefore(left as Date)) {\n    nextStart = moment(left as Date);\n    nextStart.startOf('day');\n  }\n  if (endDate.isAfter(right as Date)) {\n    nextEnd = moment(right as Date);\n    nextEnd.endOf('day');\n  }\n  if (excludedDays.findIndex(day => day === startDate.day()) !== -1) {\n    while (excludedDays.findIndex(day => day === nextStart.day()) !== -1\n      && nextStart.isSameOrBefore(endDate, 'day')) {\n      nextStart.add(1, 'days').startOf('day');\n    }\n  }\n  if (excludedDays.findIndex(day => day === endDate.day()) !== -1) {\n    while (excludedDays.findIndex(day => day === nextEnd.day()) !== -1\n      && nextStart.isSameOrAfter(startDate, 'day')) {\n      nextEnd.add(-1, 'days').endOf('day');\n    }\n  }\n  return [{ ...appointment, start: nextStart, end: nextEnd }];\n};\n\nexport const sliceAppointmentsByDays: PureComputed<\n  [AppointmentMoment, number[]], AppointmentMoment[]\n> = (appointment, excludedDays = []) => {\n  const startDate = appointment.start;\n  const endDate = appointment.end;\n  let nextStart = startDate.clone();\n  const appointments = [] as AppointmentMoment[];\n\n  while (nextStart.isBefore(endDate)) {\n    if (excludedDays.findIndex(day => day === nextStart.day()) === - 1) {\n      appointments.push({\n        ...appointment,\n        start: nextStart,\n        end: moment(nextStart).endOf('day'),\n      });\n    }\n    nextStart = moment(nextStart).add(1, 'day');\n  }\n  return appointments;\n};\n","import { RRule } from 'rrule';\n\nexport const DEFAULT_RULE_OBJECT = {\n  interval: 1,\n};\n\nexport const DAYS_OF_WEEK = {\n  MONDAY: 0,\n  TUESDAY: 1,\n  WEDNESDAY: 2,\n  THURSDAY: 3,\n  FRIDAY: 4,\n  SATURDAY: 5,\n  SUNDAY: 6,\n};\n\nexport const RRULE_DAYS_OF_WEEK = [\n  RRule.MO,\n  RRule.TU,\n  RRule.WE,\n  RRule.TH,\n  RRule.FR,\n  RRule.SA,\n  RRule.SU,\n];\n\nexport const DAYS_IN_WEEK = 7;\n\nexport const DAYS_OF_WEEK_ARRAY = [\n  DAYS_OF_WEEK.SUNDAY, DAYS_OF_WEEK.MONDAY, DAYS_OF_WEEK.TUESDAY, DAYS_OF_WEEK.WEDNESDAY,\n  DAYS_OF_WEEK.THURSDAY, DAYS_OF_WEEK.FRIDAY, DAYS_OF_WEEK.SATURDAY,\n];\n\nexport const MONTHS = {\n  JANUARY: 1,\n  FEBRUARY: 2,\n  MARCH: 3,\n  APRIL: 4,\n  MAY: 5,\n  JUNE: 6,\n  JULY: 7,\n  AUGUST: 8,\n  SEPTEMBER: 9,\n  OCTOBER: 10,\n  NOVEMBER: 11,\n  DECEMBER: 12,\n};\n\nexport const RRULE_REPEAT_TYPES = {\n  YEARLY: RRule.YEARLY as number,\n  MONTHLY: RRule.MONTHLY as number,\n  WEEKLY: RRule.WEEKLY as number,\n  DAILY: RRule.DAILY as number,\n  HOURLY: RRule.HOURLY as number,\n  MINUTELY: RRule.MINUTELY as number,\n};\n\nexport const REPEAT_TYPES = {\n  DAILY: 'daily',\n  WEEKLY: 'weekly',\n  MONTHLY: 'monthly',\n  YEARLY: 'yearly',\n  NEVER: 'never',\n};\n\nexport const REPEAT_TYPES_ARRAY = [\n  REPEAT_TYPES.DAILY, REPEAT_TYPES.WEEKLY, REPEAT_TYPES.MONTHLY, REPEAT_TYPES.YEARLY,\n];\n\nexport const WEEK_NUMBER_LABELS = [\n  'firstLabel', 'secondLabel', 'thirdLabel', 'fourthLabel', 'lastLabel',\n];\n\nexport const END_REPEAT_RADIO_GROUP = 'endRepeat';\nexport const MONTHLY_RADIO_GROUP = 'monthlyRadioGroup';\nexport const YEARLY_RADIO_GROUP = 'yearlyRadioGroup';\n\nexport const TITLE_TEXT_EDITOR = 'titleTextEditor';\nexport const MULTILINE_TEXT_EDITOR = 'multilineTextEditor';\nexport const ORDINARY_TEXT_EDITOR = 'ordinaryTextEditor';\nexport const NUMBER_EDITOR = 'numberEditor';\n\nexport const TITLE = 'title';\nexport const ORDINARY_LABEL = 'ordinaryLabel';\n\nexport const SAVE_BUTTON = 'saveButton';\nexport const DELETE_BUTTON = 'deleteButton';\nexport const CANCEL_BUTTON = 'cancelButton';\n\nexport const OUTLINED_SELECT = 'outlinedSelect';\nexport const STANDARD_SELECT = 'standardSelect';\n\nexport const SUNDAY_DATE = new Date(2019, 7, 11);\nexport const MONDAY_DATE = new Date(2019, 7, 12);\nexport const TUESDAY_DATE = new Date(2019, 7, 13);\nexport const WEDNESDAY_DATE = new Date(2019, 7, 14);\nexport const THURSDAY_DATE = new Date(2019, 7, 15);\nexport const FRIDAY_DATE = new Date(2019, 7, 16);\nexport const SATURDAY_DATE = new Date(2019, 7, 17);\n\nexport const DAYS_OF_WEEK_DATES = [\n  SUNDAY_DATE, MONDAY_DATE, TUESDAY_DATE, WEDNESDAY_DATE,\n  THURSDAY_DATE, FRIDAY_DATE, SATURDAY_DATE,\n];\n\nexport const JANUARY_DATE = new Date(2019, 0, 1);\nexport const FEBRUARY_DATE = new Date(2019, 1, 1);\nexport const MARCH_DATE = new Date(2019, 2, 1);\nexport const APRIL_DATE = new Date(2019, 3, 1);\nexport const MAY_DATE = new Date(2019, 4, 1);\nexport const JUNE_DATE = new Date(2019, 5, 1);\nexport const JULY_DATE = new Date(2019, 6, 1);\nexport const AUGUST_DATE = new Date(2019, 7, 1);\nexport const SEPTEMBER_DATE = new Date(2019, 8, 1);\nexport const OCTOBER_DATE = new Date(2019, 9, 1);\nexport const NOVEMBER_DATE = new Date(2019, 10, 1);\nexport const DECEMBER_DATE = new Date(2019, 11, 1);\n\nexport const MONTHS_DATES = [\n  JANUARY_DATE, FEBRUARY_DATE, MARCH_DATE, APRIL_DATE, MAY_DATE, JUNE_DATE,\n  JULY_DATE, AUGUST_DATE, SEPTEMBER_DATE, OCTOBER_DATE, NOVEMBER_DATE, DECEMBER_DATE,\n];\n\nexport const FIRST_WEEK = 0;\nexport const SECOND_WEEK = 1;\nexport const THIRD_WEEK = 2;\nexport const FOURTH_WEEK = 3;\nexport const LAST_WEEK = 4;\n\nexport const BASIC_YEALY_COUNT = 5;\nexport const BASIC_MONTHLY_COUNT = 12;\nexport const BASIC_WEEKLY_COUNT = 13;\nexport const BASIC_DAILY_COUNT = 30;\n","import moment from 'moment';\nimport {\n  SliceAppointmentByWeekFn, GetMonthCellIndexByAppointmentDataFn,\n  SchedulerDateTime, AppointmentMoment, ViewCell,\n} from '../../types';\nimport { DAYS_IN_WEEK } from '../appointment-form/constants';\nimport { PureComputed } from '@devexpress/dx-core';\nimport { HORIZONTAL_GROUP_ORIENTATION } from '../../constants';\nimport { checkCellGroupingInfo } from '../common/helpers';\nimport { addDateToKey } from '../../utils';\n\nexport const sliceAppointmentByWeek: SliceAppointmentByWeekFn = (timeBounds, appointment, step) => {\n  const { left, right } = timeBounds;\n  const pieces: AppointmentMoment[] = [];\n  const { start, end, key, ...restFields } = appointment;\n  let apptStart = start;\n  let apptEnd = end;\n  if (apptStart.isBefore(left)) apptStart = left.clone();\n  if (apptEnd.isAfter(right)) apptEnd = right.clone();\n  let pieceFrom = apptStart.clone();\n  let pieceTo = apptStart.clone();\n  let i = 0;\n  while (pieceTo.isBefore(apptEnd)) {\n    const currentRightBound = left.clone().add(step * i, 'days').subtract(1, 'second');\n    if (currentRightBound.isAfter(apptStart)) {\n      pieceTo = apptStart.clone().add(step * i, 'days');\n      if (pieceTo.isAfter(currentRightBound)) {\n        pieceTo = currentRightBound.clone();\n      }\n      if (pieceTo.isAfter(apptEnd)) {\n        pieceTo = apptEnd.clone();\n      }\n      if (!pieceFrom.isSameOrAfter(pieceTo)) {\n        pieces.push({\n          start: pieceFrom,\n          end: pieceTo,\n          key: addDateToKey(key, pieceFrom),\n          ...restFields,\n        });\n        pieceFrom = pieceTo.clone().add(1, 'second');\n      }\n    }\n    i += 1;\n  }\n  return pieces;\n};\n\nexport const getMonthCellIndexByAppointmentData: GetMonthCellIndexByAppointmentDataFn = (\n  viewCellsData, viewMetaData, date, appointment, takePrev = false,\n) => {\n  const {\n    groupOrientation,\n    groupedByDate,\n    groupCount,\n  } = viewMetaData;\n\n  const startViewDate = moment(viewCellsData[0][0].startDate);\n  const currentDate = moment(date as SchedulerDateTime);\n  let dayNumber = currentDate.diff(startViewDate, 'days');\n  if (takePrev && currentDate.format() === currentDate.startOf('day').format()) {\n    dayNumber -= 1;\n  }\n  const weekNumber = Math.floor(dayNumber / DAYS_IN_WEEK);\n  const dayOfWeek = dayNumber % DAYS_IN_WEEK;\n\n  const columnIndex = groupOrientation === HORIZONTAL_GROUP_ORIENTATION\n    ? getMonthHorizontallyGroupedColumnIndex(\n      viewCellsData, appointment, weekNumber, dayOfWeek, groupCount, groupedByDate,\n    )\n    : dayOfWeek;\n  const rowIndex = groupOrientation === HORIZONTAL_GROUP_ORIENTATION\n    ? weekNumber\n    : getMonthVerticallyGroupedRowIndex(\n      viewCellsData, appointment, weekNumber, dayOfWeek, groupCount,\n    );\n\n  const totalCellIndex = rowIndex * viewCellsData[0].length + columnIndex;\n  return totalCellIndex;\n};\n\nexport const getMonthHorizontallyGroupedColumnIndex: PureComputed<\n  [ViewCell[][], AppointmentMoment, number, number, number, boolean], number\n> = (viewCellsData, appointment, weekNumber, dayOfWeek, groupCount, groupByDate) => {\n  let columnIndex = -1;\n  let currentColumnIndex = groupByDate ? dayOfWeek * groupCount : dayOfWeek;\n  const cellsInGroupRow = groupByDate ? 1 : DAYS_IN_WEEK;\n\n  while (columnIndex === -1) {\n    const isCorrectCell = checkCellGroupingInfo(\n      viewCellsData[weekNumber][currentColumnIndex], appointment,\n    );\n    if (isCorrectCell) {\n      columnIndex = currentColumnIndex;\n    }\n    currentColumnIndex += cellsInGroupRow;\n  }\n  return columnIndex;\n};\n\nexport const getMonthVerticallyGroupedRowIndex: PureComputed<\n  [ViewCell[][], AppointmentMoment, number, number, number], number\n> = (viewCellsData, appointment, weekNumber, dayOfWeek, groupCount) => {\n  const rowsInOneGroup = viewCellsData.length / groupCount;\n  let rowIndex = -1;\n  let currentRowIndex = weekNumber;\n  while (rowIndex === -1) {\n    const isCorrectCell = checkCellGroupingInfo(\n      viewCellsData[currentRowIndex][dayOfWeek], appointment,\n    );\n    if (isCorrectCell) {\n      rowIndex = currentRowIndex;\n    }\n    currentRowIndex += rowsInOneGroup;\n  }\n  return rowIndex;\n};\n","import { GetCellRectHorizontalFn, GetHorizontalRectByAppointmentDataFn } from '../../types';\nimport { getAllDayCellIndexByAppointmentData } from '../all-day-panel/helpers';\nimport { getMonthCellIndexByAppointmentData } from '../month-view/helpers';\n\nconst TOP_CELL_OFFSET = 0.32;\nconst CELL_BOUND_OFFSET_PX = 1;\n\nconst getCellRect: GetCellRectHorizontalFn = (\n  date, appointment, viewCellsData, viewMetaData, cellElementsMeta, takePrev, multiline,\n) => {\n  const cellIndex = multiline\n    ? getMonthCellIndexByAppointmentData(\n      viewCellsData, viewMetaData, date, appointment, takePrev,\n    ) : getAllDayCellIndexByAppointmentData(\n      viewCellsData, viewMetaData, date, appointment, takePrev,\n    );\n\n  const {\n    top,\n    left,\n    width,\n    height,\n  } = cellElementsMeta.getCellRects[cellIndex]();\n  const parentRect = cellElementsMeta.parentRect();\n  return {\n    top,\n    left,\n    width,\n    height,\n    parentRect,\n  };\n};\n\nexport const getHorizontalRectByAppointmentData: GetHorizontalRectByAppointmentDataFn = (\n  appointment,\n  viewMetaData,\n  {\n    multiline,\n    viewCellsData,\n    cellElementsMeta,\n  },\n) => {\n  const firstCellRect = getCellRect(\n    appointment.start.toDate(), appointment, viewCellsData,\n    viewMetaData, cellElementsMeta, false, multiline,\n  );\n  const lastCellRect = getCellRect(\n    appointment.end.toDate(), appointment, viewCellsData,\n    viewMetaData, cellElementsMeta, true, multiline,\n  );\n\n  const top = firstCellRect.top + (firstCellRect.height * TOP_CELL_OFFSET);\n  const height = firstCellRect.height - (firstCellRect.height * TOP_CELL_OFFSET);\n\n  return {\n    top: top - firstCellRect.parentRect.top,\n    left: (firstCellRect.left - firstCellRect.parentRect.left) + CELL_BOUND_OFFSET_PX,\n    width: ((lastCellRect.left - firstCellRect.left) + firstCellRect.width) - CELL_BOUND_OFFSET_PX,\n    height,\n    parentWidth: firstCellRect.parentRect.width,\n  };\n};\n","import moment from 'moment';\nimport {\n  MonthCellsDataComputedFn, MonthCellData,\n  CalculateMonthDateIntervalsFn, AppointmentMoment,\n} from '../../types';\nimport { filterByViewBoundaries } from '../../utils';\nimport { sliceAppointmentByWeek } from './helpers';\n\nconst DAY_COUNT = 7;\nconst MONTH_LENGTH = 31;\n\nexport const monthCellsData: MonthCellsDataComputedFn = (\n  currentDate,\n  firstDayOfWeek,\n  intervalCount = 1,\n  today,\n) => {\n  const targetDate = moment(currentDate as Date);\n  const currentMonths = [targetDate.month()];\n  while (currentMonths.length < intervalCount) {\n    currentMonths.push(targetDate.add(1, 'months').month());\n  }\n  const firstMonthDate = moment(currentDate as Date).date(1);\n  const firstMonthDay = firstMonthDate.day() - firstDayOfWeek;\n  const prevMonthDayCount = firstMonthDate.day(firstMonthDay).day() || DAY_COUNT;\n  const prevMonth = moment(currentDate as Date).subtract(1, 'months');\n  const prevMonthStartDay = prevMonth.daysInMonth() - (prevMonthDayCount - 1);\n  const from = moment()\n    .year(prevMonth.year())\n    .month(prevMonth.month())\n    .date(prevMonthStartDay)\n    .startOf('day');\n\n  const result: MonthCellData[][] = [];\n  while (result.length < (Math.trunc((MONTH_LENGTH * intervalCount) / DAY_COUNT) + 2)) {\n    const week: MonthCellData[] = [];\n    while (week.length < DAY_COUNT) {\n      week.push({\n        startDate: from.toDate(),\n        endDate: from.clone().add(1, 'day').toDate(),\n        otherMonth: currentMonths.findIndex(month => month === from.month()) === -1,\n        today: today ? moment(today as Date).isSame(from, 'date') : false,\n      });\n      from.add(1, 'day');\n    }\n    result.push(week);\n  }\n  return result;\n};\n\nexport const calculateMonthDateIntervals: CalculateMonthDateIntervalsFn = (\n  appointments, leftBound, rightBound,\n) => [\n  appointments\n    .map(({ start, end, ...restArgs }) => ({ start: moment(start), end: moment(end), ...restArgs }))\n    .reduce((acc, appointment) =>\n      [...acc, ...filterByViewBoundaries(appointment, leftBound, rightBound, [], false)],\n      [] as AppointmentMoment[],\n    )\n    .reduce((acc, appointment) => ([\n      ...acc,\n      ...sliceAppointmentByWeek(\n        { left: moment(leftBound as Date), right: moment(rightBound as Date) },\n        appointment,\n        DAY_COUNT,\n      ),\n    ]), [] as AppointmentMoment[]),\n];\n","import moment from 'moment';\nimport {\n  AppointmentMoment, CalculateAllDayDateIntervalsFn,\n} from '../../types';\nimport { allDayPredicate, sliceAppointmentsByBoundaries } from './helpers';\nimport { filterByViewBoundaries } from '../../utils';\n\nexport const calculateAllDayDateIntervals: CalculateAllDayDateIntervalsFn = (\n  appointments,\n  leftBound, rightBound,\n  excludedDays,\n) => [\n  appointments\n    .map(({ start, end, ...restArgs }) => ({ start: moment(start), end: moment(end), ...restArgs }))\n    .reduce((acc, appointment) =>\n      [...acc, ...filterByViewBoundaries(appointment, leftBound, rightBound, excludedDays, false)],\n      [] as AppointmentMoment[],\n    )\n    .filter(appointment => allDayPredicate(appointment))\n    .reduce((acc, appointment) => ([\n      ...acc,\n      ...sliceAppointmentsByBoundaries(appointment, leftBound, rightBound, excludedDays),\n    ]), [] as AppointmentMoment[]),\n];\n","import { PureComputed } from '@devexpress/dx-core';\nimport {\n  ValidResourceInstance, Group, ViewCell, ValidResource,\n  AppointmentMoment, Grouping, GroupOrientation, AppointmentKey,\n} from '../../types';\nimport { HORIZONTAL_GROUP_ORIENTATION } from '../../constants';\n\nexport const getGroupFromResourceInstance: PureComputed<\n  [ValidResourceInstance], Group\n> = resourceInstance => ({\n  id: resourceInstance.id,\n  fieldName: resourceInstance.fieldName,\n  text: resourceInstance.text,\n});\n\nexport const addGroupInfoToCells: PureComputed<\n  [Group, Group[][], ValidResource[],\n  ViewCell[], number, boolean, GroupOrientation], ViewCell[]\n> = (\n  currentGroup, groups, sortedResources, viewCellRow, index, endOfGroup, groupOrientation,\n) => viewCellRow.map((\n    viewCell: ViewCell, cellIndex: number,\n  ) => {\n  const groupedCell = addGroupInfoToCell(\n    currentGroup, groups, sortedResources, viewCell, index, endOfGroup, groupOrientation,\n  ) as ViewCell;\n  return cellIndex === viewCellRow.length - 1 && groupOrientation === HORIZONTAL_GROUP_ORIENTATION\n    ? { ...groupedCell, endOfGroup: true }\n    : groupedCell;\n});\n\nexport const addGroupInfoToCell: PureComputed<\n  [Group, Group[][], ValidResource[],\n  ViewCell, number, boolean, GroupOrientation], ViewCell\n> = (currentGroup, groups, sortedResources, viewCell, index, endOfGroup, groupOrientation) => {\n  let previousIndex = index;\n  const groupingInfo = groups.reduceRight((\n    acc: Group[], group: Group[], currentIndex: number,\n  ) => {\n    if (currentIndex === groups.length - 1) return acc;\n    const previousResourceLength = sortedResources[currentIndex + 1].instances.length;\n    const currentGroupingInstance = group[Math.floor(\n      previousIndex / previousResourceLength,\n    )];\n    previousIndex = currentIndex;\n    return [...acc, currentGroupingInstance];\n  }, [currentGroup]);\n  return { ...viewCell, groupingInfo, endOfGroup, groupOrientation };\n};\n\nconst getCurrentGroup: PureComputed<\n  [Group[][], ValidResource[], number, Group], Group[]\n> = (groups, resources, index, group) => {\n  let currentIndex = index;\n  return groups.reduceRight((groupAcc, groupsRow, rowIndex) => {\n    if (rowIndex === groups!.length - 1) {\n      return groupAcc;\n    }\n    currentIndex = Math.floor(currentIndex / resources[rowIndex + 1].instances.length);\n    const currentInstance = groupsRow[currentIndex];\n    return [\n      ...groupAcc,\n      currentInstance,\n    ];\n  }, [group]);\n};\n\nexport const groupAppointments: PureComputed<\n  [AppointmentMoment[], ValidResource[] | undefined,\n  Group[][] | undefined], AppointmentMoment[][]\n> = (appointments, resources, groups) => {\n  if (!resources || !groups) return [appointments.slice()];\n  const mainResource = resources.find(resource => resource.isMain);\n  return groups![groups!.length - 1].map((group, index) => {\n    const currentGroup = getCurrentGroup(groups, resources, index, group);\n\n    return appointments.reduce((acc, appointment) => {\n      const belongsToGroup = currentGroup.reduce((isBelonging, groupItem) => (\n        isBelonging && groupItem.id === appointment[groupItem.fieldName]\n      ), true);\n      if (!belongsToGroup) return acc;\n      const currentMainResourceId = currentGroup.find(\n        groupItem => groupItem.fieldName === mainResource!.fieldName,\n      )!.id;\n\n      const updatedAppointment = {\n        ...appointment,\n        dataItem: {\n          ...appointment.dataItem,\n          [mainResource!.fieldName]: rearrangeResourceIds(\n            mainResource!, appointment, currentMainResourceId,\n          ),\n        },\n        resources: appointment.resources && rearrangeResources(\n          mainResource!, appointment, currentMainResourceId,\n        ),\n      };\n      return [...acc, updatedAppointment];\n    }, [] as AppointmentMoment[]);\n  });\n};\n\nconst rearrangeResourceIds: PureComputed<\n  [ValidResource, AppointmentMoment, any], any[] | any\n> = (mainResource, appointment, mainResourceId) => {\n  if (!mainResource.allowMultiple) {\n    return mainResourceId;\n  }\n  return [\n    mainResourceId,\n    ...appointment.dataItem[mainResource!.fieldName].filter((id: any) => id !== mainResourceId),\n  ];\n};\n\nexport const rearrangeResources: PureComputed<\n  [ValidResource, AppointmentMoment, any], ValidResourceInstance[]\n> = (mainResource, appointment, currentResourceInstanceId) => {\n  if (!mainResource.allowMultiple) {\n    return appointment.resources;\n  }\n  const resources = appointment.resources.slice();\n  const firstMainResource = resources.findIndex((el: ValidResourceInstance) => el.isMain);\n  const currentResourceIndex = resources.findIndex(\n    (el: ValidResourceInstance) => el.isMain && el.id === currentResourceInstanceId,\n  );\n  [resources[firstMainResource], resources[currentResourceIndex]] =\n    [resources[currentResourceIndex], resources[firstMainResource]];\n  return resources;\n};\n\nexport const expandGroupedAppointment: PureComputed<\n  [AppointmentMoment, Grouping[], ValidResource[]], AppointmentMoment[]\n> = (appointment, grouping, resources) => {\n  if (!resources || !grouping) {\n    return [appointment];\n  }\n  return resources\n    .reduce((acc: AppointmentMoment[], resource: ValidResource) => {\n      const isGroupedByResource = grouping.find(\n        group => group.resourceName === resource.fieldName,\n      ) !== undefined;\n      if (!isGroupedByResource) return acc;\n      const resourceField = resource.fieldName;\n      if (!resource.allowMultiple) {\n        return acc.reduce((accumulatedAppointments, currentAppointment) => [\n          ...accumulatedAppointments,\n          { ...currentAppointment, [resourceField]: currentAppointment.dataItem[resourceField] },\n        ], [] as AppointmentMoment[]);\n      }\n      return acc.reduce((accumulatedAppointments, currentAppointment) => [\n        ...accumulatedAppointments,\n        ...currentAppointment.dataItem[resourceField].map(\n          (resourceValue: number | string) => ({\n            ...currentAppointment,\n            [resourceField]: resourceValue,\n            key: generateMultipleResourceKey(currentAppointment.key, resourceValue),\n          }),\n        ),\n      ], [] as AppointmentMoment[]);\n    }, [appointment] as AppointmentMoment[]);\n};\n\nconst generateMultipleResourceKey: PureComputed<\n  [AppointmentKey, number | string], AppointmentKey\n> = (previousKey, resourceValue) => `${previousKey}_${resourceValue}`;\n\nexport const getGroupingInfoFromGroups: PureComputed<\n  [Group[][], number], Group[]\n> = (groups, groupIndex) => {\n  let previousIndex = groupIndex;\n  return groups.reduceRight((acc, currentGroups, currentIndex) => {\n    if (currentIndex === groups.length - 1) return acc;\n    const previousResourceLength = groups[currentIndex + 1].length / currentGroups.length;\n    const currentGroupingInstance = currentGroups[Math.floor(\n      previousIndex / previousResourceLength,\n    )];\n    previousIndex = currentIndex;\n    return [...acc, currentGroupingInstance];\n  }, [getGroupsLastRow(groups)[groupIndex]]);\n};\n\nexport const getGroupsLastRow: PureComputed<\n  [Group[][]], Group[]\n> = groups => groups[groups.length - 1];\n","import { PureComputed } from '@devexpress/dx-core';\nimport {\n  Grouping, ValidResourceInstance, ViewCell, ValidResource,\n  Group, AppointmentMoment, ExpandGroupingPanelCellFn, GroupOrientation,\n  CellElementsMeta, SchedulerView,\n} from '../../types';\nimport {\n  getGroupFromResourceInstance, addGroupInfoToCells,\n  groupAppointments, expandGroupedAppointment, addGroupInfoToCell, getGroupsLastRow,\n} from './helpers';\nimport { sliceAppointmentsByDays } from '../all-day-panel/helpers';\nimport { HORIZONTAL_GROUP_ORIENTATION, VERTICAL_GROUP_ORIENTATION } from '../../constants';\nimport { containsDSTChange } from '../common/helpers';\n\nexport const filterResourcesByGrouping: PureComputed<\n  [Array<ValidResource>, Array<Grouping>], Array<ValidResource>\n> = (resources, grouping) => resources.filter(\n  resource => grouping.find(resourceId => resource.fieldName === resourceId.resourceName),\n);\n\nexport const sortFilteredResources: PureComputed<\n  [Array<ValidResource>, Array<Grouping>], Array<ValidResource>\n> = (resources, grouping) => grouping.map(({ resourceName }: Grouping) => (\n  resources.find(resource => resource.fieldName === resourceName) as ValidResource\n));\n\nexport const getGroupsFromResources: PureComputed<\n  [Array<ValidResource>], Array<Array<Group>>\n> = sortedAndFilteredResources => sortedAndFilteredResources.reduce((\n    acc: Array<Array<Group>>, resource: ValidResource, index: number,\n  ) => {\n  if (index === 0) {\n    return [resource.instances.map(instance => getGroupFromResourceInstance(instance))];\n  }\n\n  return [\n    ...acc,\n    acc[index - 1].reduce((currentResourceNames: Array<Group>) => [\n      ...currentResourceNames,\n      ...resource.instances.map(\n        (instance: ValidResourceInstance) => getGroupFromResourceInstance(instance),\n      ),\n    ], []),\n  ];\n}, []);\n\nexport const expandViewCellsDataWithGroups: PureComputed<\n  [ViewCell[][], Group[][], ValidResource[], boolean, GroupOrientation], ViewCell[][]\n> = (viewCellsData, groups, sortedResources, groupByDate, groupOrientation) => {\n  if (groups.length === 0) return viewCellsData;\n  if (groupByDate) {\n    return expandCellsWithGroupedByDateData(viewCellsData, groups, sortedResources);\n  }\n  if (groupOrientation === HORIZONTAL_GROUP_ORIENTATION) {\n    return expandHorizontallyGroupedCells(viewCellsData, groups, sortedResources);\n  }\n  return expandVerticallyGroupedCells(viewCellsData, groups, sortedResources);\n};\n\nconst expandCellsWithGroupedByDateData: ExpandGroupingPanelCellFn = (\n  viewCellsData, groups, sortedResources,\n) => viewCellsData.map(\n  (cellsRow: ViewCell[]) => cellsRow.reduce((acc: ViewCell[], viewCell: ViewCell) => {\n    const groupedCells = getGroupsLastRow(groups).map((\n      group: Group, index: number,\n    ) => addGroupInfoToCell(\n      group, groups, sortedResources, viewCell, index,\n      false, HORIZONTAL_GROUP_ORIENTATION,\n    ));\n    groupedCells[groupedCells.length - 1] = {\n      ...groupedCells[groupedCells.length - 1],\n      endOfGroup: true,\n    };\n    return [...acc, ...groupedCells] as ViewCell[];\n  }, [] as ViewCell[]),\n);\n\nconst expandHorizontallyGroupedCells: ExpandGroupingPanelCellFn = (\n  viewCellsData, groups, sortedResources,\n) => getGroupsLastRow(groups).reduce((\n  acc: ViewCell[][], group: Group, index: number,\n) => {\n  if (index === 0) {\n    return viewCellsData.map((viewCellsRow: ViewCell[]) =>\n      addGroupInfoToCells(\n        group, groups, sortedResources, viewCellsRow, index,\n        false, HORIZONTAL_GROUP_ORIENTATION,\n      ) as ViewCell[],\n    );\n  }\n  return acc.map((item: ViewCell[], id: number) => [\n    ...item,\n    ...addGroupInfoToCells(\n      group, groups, sortedResources, viewCellsData[id], index,\n      false, HORIZONTAL_GROUP_ORIENTATION,\n    ),\n  ]);\n}, [[]] as ViewCell[][]);\n\nconst expandVerticallyGroupedCells: ExpandGroupingPanelCellFn = (\n  viewCellsData, groups, sortedResources,\n) => getGroupsLastRow(groups).reduce((\n  acc: ViewCell[][], group: Group, index: number,\n) => {\n  if (index === 0) {\n    return viewCellsData.map((\n      viewCellsRow: ViewCell[], viewRowIndex: number,\n    ) => addGroupInfoToCells(\n        group, groups, sortedResources, viewCellsRow,\n        index, viewRowIndex === viewCellsData.length - 1, VERTICAL_GROUP_ORIENTATION,\n      ) as ViewCell[]);\n  }\n  return [\n    ...acc,\n    ...viewCellsData.map((viewCellsRow: ViewCell[], viewRowIndex: number) =>\n      addGroupInfoToCells(\n        group, groups, sortedResources, viewCellsRow,\n        index, viewRowIndex === viewCellsData.length - 1, VERTICAL_GROUP_ORIENTATION,\n      ) as ViewCell[],\n    ),\n  ];\n}, [[]] as ViewCell[][]);\n\nexport const updateGroupingWithMainResource: PureComputed<\n  [Grouping[] | undefined, ValidResource[]], Grouping[]\n> = (grouping, resources) => grouping\n  || [{ resourceName: resources.find(resource => resource.isMain)!.fieldName }];\n\nexport const expandGroups: PureComputed<\n  [AppointmentMoment[][], Grouping[], ValidResource[],\n  Group[][], number[], boolean], AppointmentMoment[][]\n> = (appointments, grouping, resources, groups, excludedDays, sliceByDay = false) => {\n  const slicedAppointments = sliceByDay ?\n    appointments[0].reduce((acc: AppointmentMoment[], appointment: AppointmentMoment) => ([\n      ...acc,\n      ...sliceAppointmentsByDays(appointment, excludedDays),\n    ]), [] as AppointmentMoment[]) : appointments[0];\n\n  const expandedAppointments = (slicedAppointments as AppointmentMoment[])\n    .reduce((acc: AppointmentMoment[], appointment: AppointmentMoment) => [\n      ...acc,\n      ...expandGroupedAppointment(appointment, grouping, resources),\n    ], [] as AppointmentMoment[]);\n  return groupAppointments(expandedAppointments, resources, groups);\n};\n\nexport const updateTimeTableCellElementsMeta: PureComputed<\n  [CellElementsMeta, (viewName: string) => GroupOrientation, Group[][],\n  boolean, ViewCell[][], SchedulerView], CellElementsMeta\n> = (\n  timeTableElementsMeta, groupOrientation, groups, allDayPanelExists, viewCellsData, currentView,\n) => {\n  if (checkCellElementsMeta(\n    timeTableElementsMeta, groupOrientation, currentView, allDayPanelExists,\n  )) {\n    return timeTableElementsMeta;\n  }\n\n  const {\n    groupCount, timeTableWidth, groupSize, validGetCellRects,\n  } = initializeCellElementsData(timeTableElementsMeta, viewCellsData, groups);\n  let allDayPanelsLeft = groupCount;\n\n  while (allDayPanelsLeft > 0) {\n    allDayPanelsLeft -= 1;\n    validGetCellRects.splice(allDayPanelsLeft * (timeTableWidth + groupSize), timeTableWidth);\n  }\n\n  return {\n    parentRect: timeTableElementsMeta.parentRect,\n    getCellRects: validGetCellRects,\n  };\n};\n\nexport const updateAllDayCellElementsMeta: PureComputed<\n  [CellElementsMeta, CellElementsMeta, (viewName: string) => GroupOrientation, Group[][],\n  boolean, ViewCell[][], SchedulerView], CellElementsMeta\n> = (\n  allDayElementsMeta, timeTableElementsMeta, groupOrientation, groups,\n  allDayPanelExists, viewCellsData, currentView,\n) => {\n  if (checkCellElementsMeta(\n    timeTableElementsMeta, groupOrientation, currentView, allDayPanelExists,\n  )) {\n    return allDayElementsMeta;\n  }\n\n  const {\n    groupCount, timeTableWidth, groupSize, validGetCellRects,\n  } = initializeCellElementsData(timeTableElementsMeta, viewCellsData, groups);\n  let allDayPanelsLeft = groupCount;\n\n  while (allDayPanelsLeft > 0) {\n    allDayPanelsLeft -= 1;\n    validGetCellRects.splice(\n      groupSize * allDayPanelsLeft + timeTableWidth * (allDayPanelsLeft + 1), groupSize,\n    );\n  }\n\n  return {\n    parentRect: timeTableElementsMeta.parentRect,\n    getCellRects: validGetCellRects,\n  };\n};\n\nconst checkCellElementsMeta: PureComputed<\n  [CellElementsMeta, (viewName: string) => GroupOrientation, SchedulerView, boolean], boolean\n> = (\n  cellElementsMeta, groupOrientation, currentView, allDayPanelExists,\n) => groupOrientation(currentView.name) === HORIZONTAL_GROUP_ORIENTATION\n  || !allDayPanelExists || !cellElementsMeta.getCellRects;\n\nconst initializeCellElementsData: PureComputed<\n  [CellElementsMeta, ViewCell[][], Group[][]], any\n> = (cellElementsMeta, viewCellsData, groups) => {\n  const timeTableWidth = viewCellsData[0].length;\n  const groupCount = getGroupsLastRow(groups).length;\n  const groupHeight = viewCellsData.length / groupCount;\n  return {\n    groupCount,\n    timeTableWidth,\n    groupSize: timeTableWidth * groupHeight,\n    validGetCellRects: cellElementsMeta.getCellRects.slice(),\n  };\n};\n\nexport const updateTimeCellsData: PureComputed<\n  [ViewCell[][], ViewCell[][], Group[][], ValidResource[], GroupOrientation], ViewCell[][]\n> = (viewCellsData, timeCellsData, groups, sortedResources, groupOrientation) => {\n  const { startDate: firstViewDate } = viewCellsData[0][0];\n  if (!containsDSTChange(firstViewDate)) {\n    return viewCellsData;\n  }\n\n  if (groupOrientation !== VERTICAL_GROUP_ORIENTATION) {\n    return timeCellsData;\n  }\n\n  return expandVerticallyGroupedCells(timeCellsData, groups, sortedResources);\n};\n","import {\n  AllDayRects, VerticalRects, HorizontalRects,\n} from '../../types';\nimport {\n  VERTICAL_TYPE, HORIZONTAL_TYPE,\n} from '../../constants';\nimport { calculateRectByDateAndGroupIntervals } from '../appointments/helpers';\nimport { calculateWeekDateIntervals } from '../week-view/computeds';\nimport { getVerticalRectByAppointmentData } from '../vertical-rect/helpers';\nimport { getHorizontalRectByAppointmentData } from '../horizontal-rect/helpers';\nimport { calculateMonthDateIntervals } from '../month-view/computeds';\nimport { calculateAllDayDateIntervals } from '../all-day-panel/computeds';\nimport { expandGroups } from '../integrated-grouping/computeds';\nimport { getGroupsLastRow } from '../integrated-grouping/helpers';\n\nexport const allDayRects: AllDayRects = (\n  appointments, startViewDate, endViewDate,\n  excludedDays, viewCellsData, cellElementsMeta,\n  grouping, resources, groups, groupOrientation, sliceAppointments,\n) => {\n  const intervals = calculateAllDayDateIntervals(\n    appointments, startViewDate, endViewDate, excludedDays,\n  );\n  const groupedIntervals = expandGroups(\n    intervals, grouping, resources, groups, excludedDays, sliceAppointments,\n  );\n\n  return calculateRectByDateAndGroupIntervals(\n    {\n      growDirection: HORIZONTAL_TYPE,\n      multiline: false,\n    },\n    groupedIntervals,\n    getHorizontalRectByAppointmentData,\n    {\n      startViewDate,\n      endViewDate,\n      viewCellsData,\n      cellElementsMeta,\n      excludedDays,\n    },\n    {\n      groupOrientation,\n      groupedByDate: sliceAppointments,\n      groupCount: groups ? getGroupsLastRow(groups).length : 1,\n    },\n  );\n};\n\nexport const verticalTimeTableRects: VerticalRects = (\n  appointments, startViewDate, endViewDate, excludedDays, viewCellsData,\n  cellDuration, cellElementsMeta, grouping, resources, groups,  groupOrientation, groupByDate,\n) => {\n  const intervals = calculateWeekDateIntervals(\n    appointments, startViewDate, endViewDate, excludedDays, cellDuration,\n  );\n  const groupedIntervals = expandGroups(\n    intervals, grouping, resources, groups, excludedDays, false,\n  );\n\n  return calculateRectByDateAndGroupIntervals(\n    {\n      growDirection: VERTICAL_TYPE,\n      multiline: false,\n    },\n    groupedIntervals,\n    getVerticalRectByAppointmentData,\n    {\n      startViewDate,\n      endViewDate,\n      viewCellsData,\n      cellDuration,\n      cellElementsMeta,\n    },\n    {\n      groupOrientation,\n      groupedByDate: groupByDate,\n      groupCount: groups ? getGroupsLastRow(groups).length : 1,\n    },\n  );\n};\n\nexport const horizontalTimeTableRects: HorizontalRects = (\n  appointments, startViewDate, endViewDate, viewCellsData,\n  cellElementsMeta, grouping, resources, groups, groupOrientation, sliceAppointments,\n) => {\n  const intervals = calculateMonthDateIntervals(\n    appointments, startViewDate, endViewDate,\n  );\n  const groupedIntervals = expandGroups(\n    intervals, grouping, resources, groups, [], sliceAppointments,\n  );\n\n  return calculateRectByDateAndGroupIntervals(\n    {\n      growDirection: HORIZONTAL_TYPE,\n      multiline: true,\n    },\n    groupedIntervals,\n    getHorizontalRectByAppointmentData,\n    {\n      startViewDate,\n      endViewDate,\n      viewCellsData,\n      cellElementsMeta,\n    },\n    {\n      groupOrientation,\n      groupedByDate: sliceAppointments,\n      groupCount: groups ? getGroupsLastRow(groups).length : 1,\n    },\n  );\n};\n","import { DateTimeFormatInstanceFn } from '../../types';\n\nexport const dateTimeFormatInstance: DateTimeFormatInstanceFn = (\n  locale, formatOptions,\n) => new Intl.DateTimeFormat(locale, formatOptions);\n","import { PureComputed } from '@devexpress/dx-core';\nimport { AppointmentModel, Appointment, FormatDateTimeGetterFn, FormatterFn } from '../../types';\nimport { convertToMoment } from '../common/helpers';\nimport { dateTimeFormatInstance } from './helpers';\n\nexport const appointments: PureComputed<\n  [AppointmentModel[]], Appointment[]\n> = data => data.map((appointment, index) => ({\n  dataItem: appointment,\n  start: appointment.startDate,\n  ...appointment.endDate !== undefined ? {\n    end: appointment.endDate,\n  } : {\n    end: appointment.startDate,\n    dataItem: { ...appointment, endDate: appointment.startDate },\n  },\n  ...appointment.allDay !== undefined && {\n    allDay: appointment.allDay,\n  },\n  ...appointment.rRule !== undefined && {\n    rRule: appointment.rRule,\n  },\n  ...appointment.exDate !== undefined && {\n    exDate: appointment.exDate,\n  },\n  key: appointment.id || index,\n}));\n\nexport const formatDateTimeGetter: FormatDateTimeGetterFn = (locale) => {\n  const cache = new Map<Intl.DateTimeFormatOptions, Intl.DateTimeFormat>(); // any -> type\n\n  const formatter: FormatterFn = (nextDate, nextOptions) => {\n    if (nextDate === undefined) return '';\n    const date = convertToMoment(nextDate).toDate();\n    let formatInstance = cache.get(nextOptions);\n\n    if (!formatInstance) {\n      formatInstance = dateTimeFormatInstance(locale, nextOptions);\n      cache.set(nextOptions, formatInstance);\n    }\n\n    return formatInstance.format(date);\n  };\n  return formatter;\n};\n","import { PureComputed } from '@devexpress/dx-core';\nimport { Group, HorizontalGroupingCellData, VerticalGroupingCellData } from '../../types';\nimport { getGroupsLastRow } from '../integrated-grouping/helpers';\n\nexport const getCellKey: PureComputed<\n  [Group[][], number, number], string\n> = (groups, groupIndex, rowNumber) => {\n  let currentIndex = groupIndex;\n  return groups.reduceRight((acc: string, groupRow: Group[], rowIndex: number) => {\n    if (rowNumber < rowIndex) return acc;\n    const currentKey = groupRow[currentIndex].id;\n    if (rowIndex > 0) {\n      const currentRowLength = groups[rowIndex].length / groups[rowIndex - 1].length;\n      currentIndex = Math.floor(currentIndex / currentRowLength);\n    }\n    return acc + currentKey;\n  }, '' as string);\n};\n\nexport const getRowFromGroups: PureComputed<\n  [number, Group[], any, Group[][], number], HorizontalGroupingCellData[]\n> = (width, groupRow, cellStyle, groups, rowIndex) => {\n  let row = [] as any[];\n  const currentRowLength = groupRow.length;\n  const standardWidth = width / getGroupsLastRow(groups).length;\n  const colSpan = getGroupsLastRow(groups).length / currentRowLength;\n  for (let i = 0; i < standardWidth; i += 1) {\n    row = [...row, ...groupRow.reduce((acc, group, index) => [\n      ...acc,\n      {\n        group,\n        colSpan,\n        key: getCellKey(groups, index, rowIndex) + i,\n        left: cellStyle.left,\n        endOfGroup: index === currentRowLength - 1,\n      },\n    ], [] as any[])];\n  }\n  return row;\n};\n\nexport const getVerticalRowFromGroups: PureComputed<\n  [Group[][], number, number, number, boolean, number], VerticalGroupingCellData[]\n> = (\n  groups, groupIndex, groupingPanelRowSpan,\n  timeTableCellHeight, addAllDayHeight, allDayCellHeight,\n) => groups.reduce((\n  acc, groupColumn, columnIndex,\n) => {\n  const groupSpan = getGroupsLastRow(groups).length / groupColumn.length;\n  const cellIndex = groupIndex / groupSpan;\n  const baseHeight = (groupingPanelRowSpan * groupSpan * timeTableCellHeight)\n    / getGroupsLastRow(groups).length;\n  const allDayHeight = groupSpan * allDayCellHeight;\n\n  return groupIndex % groupSpan !== 0 ? acc : [\n    ...acc,\n    {\n      group: groupColumn[cellIndex],\n      rowSpan: groupSpan,\n      height: addAllDayHeight ? baseHeight + allDayHeight : baseHeight,\n      key: getCellKey(groups, cellIndex, columnIndex),\n    },\n  ];\n}, [] as VerticalGroupingCellData[]);\n","import { PureComputed } from '@devexpress/dx-core';\nimport { HORIZONTAL_GROUP_ORIENTATION } from '../../constants';\nimport { ViewCell, Group, GroupOrientation, TimeScaleLabelData, AllDayCell } from '../../types';\nimport { getCellKey } from '../grouping-panel/utils';\nimport { getGroupsLastRow } from '../integrated-grouping/helpers';\n\nconst getLabelsForSingleGroup: PureComputed<\n  [Group[][], ViewCell[][], number, number], TimeScaleLabelData[]\n> = (groups, cellsData, groupIndex, groupHeight) => {\n  const currentGroupIndex = groupIndex * groupHeight;\n  const nextGroupIndex = currentGroupIndex + groupHeight;\n\n  return cellsData.slice(currentGroupIndex, nextGroupIndex - 1).reduce((\n    acc: TimeScaleLabelData[], days: ViewCell[],\n  ) => (([\n    ...acc,\n    {\n      startDate: days[0].startDate,\n      endDate: days[0].endDate,\n      key: days[0].endDate + getCellKey(groups, groupIndex, groups.length - 1),\n      groupingInfo: days[0].groupingInfo,\n    },\n  ])), [] as TimeScaleLabelData[]);\n};\n\nexport const getLabelsForAllGroups: PureComputed<\n  [ViewCell[][], Group[][], GroupOrientation], TimeScaleLabelData[][]\n> = (cellsData, groups, groupOrientation) => {\n  if (groupOrientation === HORIZONTAL_GROUP_ORIENTATION) {\n    return [cellsData.map(cellsRow => ({\n      startDate: cellsRow[0].startDate,\n      endDate: cellsRow[0].endDate,\n      groupingInfo: cellsRow[0].groupingInfo,\n      key: cellsRow[0].endDate,\n    }))];\n  }\n\n  const groupCount = getGroupsLastRow(groups).length;\n  const singleGroupHeight = cellsData.length / groupCount;\n\n  return getGroupsLastRow(groups).reduce((\n    acc: TimeScaleLabelData[][], group: Group, groupIndex: number,\n  ) => [\n    ...acc,\n    getLabelsForSingleGroup(\n      groups, cellsData, groupIndex, singleGroupHeight,\n    ) as TimeScaleLabelData[],\n  ], [] as TimeScaleLabelData[][]);\n};\n\nexport const prepareVerticalViewCellsData: PureComputed<\n  [ViewCell[][], AllDayCell[][]], ViewCell[][][]\n> = (cellsData, allDayCellsData) => {\n  const groupCount = allDayCellsData?.length || 1;\n  const validCellsData = [] as ViewCell[][][];\n  const groupHeight = cellsData.length / groupCount;\n  for (let i = 0; i < groupCount; i += 1) {\n    validCellsData.push(cellsData.slice(i * groupHeight, (i + 1) * groupHeight));\n  }\n  return validCellsData;\n};\n","import moment from 'moment';\nimport { PureReducer } from '@devexpress/dx-core';\nimport { ChangeCurrentDatePayload } from '../../types';\n\nexport const changeCurrentDate: PureReducer<Date, ChangeCurrentDatePayload> = (\n  currentDate, {\n  nextDate, step, amount, direction,\n}) => (\n  nextDate\n  || moment(currentDate as Date)[direction === 'back' ? 'subtract' : 'add'](amount, step)\n    .toDate()\n  || moment().subtract(amount, step)\n);\n\nexport const setCurrentViewName: PureReducer<\n  string, string, string\n> = (currentViewName, nextViewName) => nextViewName;\n","import { PureReducer } from '@devexpress/dx-core';\nimport { AppointmentMeta } from '../../types';\n\nexport const setAppointmentMeta: PureReducer<AppointmentMeta, AppointmentMeta> = (\n  prevAppointmentMeta,\n  { target, data },\n) => ({ target, data });\n","export const OPEN_COMMAND_BUTTON = 'open';\nexport const CLOSE_COMMAND_BUTTON = 'close';\nexport const DELETE_COMMAND_BUTTON = 'delete';\nexport const CANCEL_COMMAND_BUTTON = 'cancel';\nexport const COMMIT_COMMAND_BUTTON = 'commit';\n","import { PureReducer } from '@devexpress/dx-core';\nimport { AppointmentModel, AppointmentDataPayload } from '../../types';\n\nexport const setAppointmentData: PureReducer<\n  AppointmentModel, AppointmentDataPayload\n> = (prevAppointmentData, { appointmentData }) => appointmentData;\n","import {\n  LONG_WEEK_DAY_OPTIONS, DAY_LONG_MONTH_OPTIONS,\n  LONG_MONTH_OPTIONS,\n} from '@devexpress/dx-scheduler-core';\nimport { PureComputed } from '@devexpress/dx-core';\nimport {\n  SelectOption, OptionsFormatterFn, DateFormatterFn, RecurrenceFrequency,\n} from '../../types';\nimport {\n  MONTHS_DATES, REPEAT_TYPES_ARRAY, WEEK_NUMBER_LABELS, DAYS_IN_WEEK, RRULE_REPEAT_TYPES,\n  BASIC_YEALY_COUNT, BASIC_MONTHLY_COUNT, BASIC_WEEKLY_COUNT, BASIC_DAILY_COUNT,\n} from './constants';\nimport { getDaysOfWeekDates, getDaysOfWeekArray } from './helpers';\n\nexport const getWeekNumberLabels: OptionsFormatterFn = getMessage =>\n  WEEK_NUMBER_LABELS.map((weekNumberLabel, index) => ({\n    text: getMessage(weekNumberLabel),\n    id: index,\n  }));\n\nexport const getDaysOfWeek: PureComputed<\n  [(date: Date, formatOptions: object) => string, number], Array<SelectOption>\n> = (formatDate, firstDayOfWeek) => {\n  const daysOfWeekArray = getDaysOfWeekArray(firstDayOfWeek);\n  const daysOfWeekDates = getDaysOfWeekDates(firstDayOfWeek);\n  return daysOfWeekDates.map(\n    (day, index) => ({\n      text: getDayOfWeek(day, formatDate),\n      id: index + 1 < DAYS_IN_WEEK ? daysOfWeekArray[index + 1] : daysOfWeekArray[0],\n    }),\n  );\n};\n\nexport const getMonths: DateFormatterFn = formatDate => MONTHS_DATES.map((month, index) => ({\n  text: getMonth(month, formatDate),\n  id: getMonthId(index),\n}));\n\nexport const getMonthsWithOf: PureComputed<\n  [(messageKey: string) => string, (date: Date, formatOptions: object) => string],\n    Array<SelectOption>\n> = (getMessage, formatDate) => MONTHS_DATES.map((month, index) => ({\n  text: getMonthWithOf(month, getMessage, formatDate),\n  id: getMonthId(index),\n}));\n\nconst getMonthWithOf = (\n  date: Date,\n  getMessage: (messageKey: string) => string,\n  formatDate: (date: Date, formatOptions: object) => string,\n) => getMessage('ofLabel')\n  + formatDate(date, DAY_LONG_MONTH_OPTIONS).replace(/[\\d.,]/g, '').toString();\n\nconst getMonth = (\n  date: Date,\n  formatDate: (date: Date, formatOptions: object) => string,\n) => formatDate(date, LONG_MONTH_OPTIONS);\n\nconst getDayOfWeek = (\n  date: Date,\n  formatDate: (date: Date, formatOptions: object) => string,\n) => formatDate(date, LONG_WEEK_DAY_OPTIONS);\n\nconst getMonthId: PureComputed<\n  [number], number\n> = index => index + 1;\n\nexport const getAvailableRecurrenceOptions: OptionsFormatterFn = getMessage =>\n  REPEAT_TYPES_ARRAY.map(type => ({\n    text: getMessage(type),\n    id: type,\n  }));\n\nexport const getCountDependingOnRecurrenceType = (frequency: RecurrenceFrequency) => {\n  let count;\n  switch (frequency) {\n    case RRULE_REPEAT_TYPES.YEARLY:\n      count = BASIC_YEALY_COUNT;\n      break;\n    case RRULE_REPEAT_TYPES.MONTHLY:\n      count = BASIC_MONTHLY_COUNT;\n      break;\n    case RRULE_REPEAT_TYPES.WEEKLY:\n      count = BASIC_WEEKLY_COUNT;\n      break;\n    case RRULE_REPEAT_TYPES.DAILY:\n      count = BASIC_DAILY_COUNT;\n      break;\n  }\n  return count;\n};\n\nexport const checkIsNaturalNumber: PureComputed<\n  [number], boolean\n> = number => number > 0 && number <= Number.MAX_SAFE_INTEGER;\n","import moment from 'moment';\nimport { PureComputed } from '@devexpress/dx-core';\nimport { RRule, Options, Weekday } from 'rrule';\nimport {\n  Action,\n  StartDate,\n  EndDate,\n  RadioGroupDisplayData,\n  ValidResource,\n} from '../../types';\nimport {\n  DEFAULT_RULE_OBJECT, RRULE_REPEAT_TYPES, REPEAT_TYPES, LAST_WEEK,\n  DAYS_OF_WEEK_ARRAY, DAYS_IN_WEEK, DAYS_OF_WEEK_DATES, RRULE_DAYS_OF_WEEK,\n} from './constants';\nimport { getCountDependingOnRecurrenceType } from './utils';\n\nexport const callActionIfExists: PureComputed<[Action, object], void> = (action, payload) => {\n  if (action) {\n    action(payload);\n  }\n};\n\nexport const isAllDayCell: PureComputed<\n  [StartDate, EndDate], boolean\n> = (\n  startDate, endDate,\n) => moment(endDate as EndDate).diff(moment(startDate as StartDate), 'days') >= 1;\n\nexport const changeRecurrenceFrequency: PureComputed<\n  [string, number, Date], string\n> = (\n  rule, freq, startDate,\n) => {\n  if (!rule) {\n    if (freq === RRULE_REPEAT_TYPES.MONTHLY) {\n      return (new RRule({\n        ...DEFAULT_RULE_OBJECT,\n        freq,\n        bymonthday: [startDate.getDate()],\n        count: getCountDependingOnRecurrenceType(freq),\n      })).toString();\n    }\n    if (freq === RRULE_REPEAT_TYPES.YEARLY) {\n      return (new RRule({\n        ...DEFAULT_RULE_OBJECT,\n        freq,\n        bymonthday: [startDate.getDate()],\n        bymonth: startDate.getMonth() + 1,\n        count: getCountDependingOnRecurrenceType(freq),\n      })).toString();\n    }\n    return (new RRule({\n      ...DEFAULT_RULE_OBJECT, freq, count: getCountDependingOnRecurrenceType(freq),\n    })).toString();\n  }\n\n  const options = RRule.parseString(rule);\n  if (options.freq === freq) return rule;\n\n  options.freq = freq;\n  options.count = getCountDependingOnRecurrenceType(freq);\n  if (freq === RRULE_REPEAT_TYPES.MONTHLY || freq === RRULE_REPEAT_TYPES.YEARLY) {\n    options.bymonthday = startDate.getDate();\n  }\n  if (freq === RRULE_REPEAT_TYPES.YEARLY) {\n    options.bymonth = startDate.getMonth() + 1;\n  }\n  if (freq === RRULE_REPEAT_TYPES.DAILY || freq === RRULE_REPEAT_TYPES.WEEKLY) {\n    options.bymonthday = undefined;\n  }\n  options.byweekday = undefined;\n  const nextRule = new RRule(options);\n  return nextRule.toString();\n};\n\nexport const getRecurrenceOptions: PureComputed<\n  [string | undefined], Partial<Options> | null\n> = rule => !rule ? null : RRule.parseString(rule);\n\nexport const changeRecurrenceOptions = (options: Partial<Options>) => {\n  return options ? (new RRule({ ...options })).toString() : undefined;\n};\n\nexport const handleStartDateChange = (nextStartDay: number, options: Partial<Options>) => {\n  if (nextStartDay <= 31) {\n    const nextOptions = { ...options, bymonthday: nextStartDay };\n    return changeRecurrenceOptions(nextOptions);\n  }\n  return changeRecurrenceOptions(options);\n};\n\nexport const handleToDayOfWeekChange = (\n  weekNumber: number, dayOfWeek: number, options: Partial<Options>,\n) => {\n  const validDayOfWeek = dayOfWeek > 0 ? dayOfWeek - 1 : 6;\n  const validWeekNumber = weekNumber === 4 ? -1 : weekNumber + 1;\n  const rruleDayOfWeek = RRULE_DAYS_OF_WEEK[validDayOfWeek];\n\n  const nextOptions = {\n    ...options,\n    byweekday: [rruleDayOfWeek.nth(validWeekNumber)],\n    bymonthday: undefined,\n  };\n\n  return changeRecurrenceOptions(nextOptions);\n};\n\nexport const getRRuleFrequency: PureComputed<\n  [string], number\n> = repeatType => RRULE_REPEAT_TYPES[repeatType.toUpperCase()];\n\nexport const getFrequencyString: PureComputed<\n  [number], string\n> = (rRuleFrequency) => {\n  if (rRuleFrequency === RRULE_REPEAT_TYPES.DAILY) return REPEAT_TYPES.DAILY;\n  if (rRuleFrequency === RRULE_REPEAT_TYPES.WEEKLY) return REPEAT_TYPES.WEEKLY;\n  if (rRuleFrequency === RRULE_REPEAT_TYPES.MONTHLY) return REPEAT_TYPES.MONTHLY;\n  if (rRuleFrequency === RRULE_REPEAT_TYPES.YEARLY) return REPEAT_TYPES.YEARLY;\n  return REPEAT_TYPES.NEVER;\n};\n\nexport const getRadioGroupDisplayData: PureComputed<\n  [Partial<Options>, number, number, number, string, string], RadioGroupDisplayData\n> = (\n  recurrenceOptions, stateDayOfWeek, stateWeekNumber, stateDayNumber, firstOption, secondOption,\n) => {\n  if (recurrenceOptions.bymonthday && !Array.isArray(recurrenceOptions.bymonthday)) {\n    return {\n      dayNumberTextField: (recurrenceOptions.bymonthday as number),\n      weekNumber: stateWeekNumber,\n      dayOfWeek: stateDayOfWeek,\n      radioGroupValue: firstOption,\n    };\n  }\n  if (!recurrenceOptions.byweekday) {\n    return {\n      dayOfWeek: stateDayOfWeek,\n      weekNumber: stateWeekNumber,\n      radioGroupValue: secondOption,\n      dayNumberTextField: stateDayNumber,\n    };\n  }\n  const dayOfWeek = recurrenceOptions.byweekday[0].weekday < 6\n    ? recurrenceOptions.byweekday[0].weekday + 1 : 0;\n  const weekNumber = recurrenceOptions.byweekday[0].n === -1\n    ? LAST_WEEK\n    : recurrenceOptions.byweekday[0].n - 1;\n\n  return {\n    dayOfWeek,\n    weekNumber,\n    radioGroupValue: secondOption,\n    dayNumberTextField: stateDayNumber,\n  };\n};\n\nexport const handleChangeFrequency: PureComputed<\n  [string, string, Date, Action], void\n> = (repeatType, rRule, startDate, action) => {\n  const rruleRepeatType = getRRuleFrequency(repeatType);\n  let nextRRule;\n  if (rruleRepeatType !== undefined) {\n    nextRRule = changeRecurrenceFrequency(\n      rRule,\n      rruleRepeatType,\n      startDate,\n    );\n  }\n  action({ rRule: nextRRule });\n};\n\nexport const handleWeekDaysChange: PureComputed<\n[Partial<Options>, number], void\n> = (options, currentWeekDay) => {\n  const byWeekDay = options.byweekday || [];\n  const index = (byWeekDay as Weekday[]).findIndex(({ weekday }) => weekday === currentWeekDay);\n\n  const isAdded = index === -1;\n\n  if (isAdded) {\n    (byWeekDay as Weekday[]).push(RRULE_DAYS_OF_WEEK[currentWeekDay]);\n  } else if (index > -1) {\n    (byWeekDay as Weekday[]).splice(index, 1);\n  }\n  if (byWeekDay === 0) return { ...options, byweekday: undefined };\n  return { ...options, byweekday: byWeekDay };\n};\n\nexport const getDaysOfWeekArray: PureComputed<[number], Array<number>> = (firstDayOfWeek) => {\n  const firstPart = DAYS_OF_WEEK_ARRAY.filter(\n    dayOfWeek => dayOfWeek >= firstDayOfWeek - 1 && dayOfWeek < DAYS_IN_WEEK - 1,\n  );\n  const secondPart = DAYS_OF_WEEK_ARRAY.filter(\n    dayOfWeek => dayOfWeek < firstDayOfWeek - 1 || dayOfWeek >= DAYS_IN_WEEK - 1,\n  );\n  return firstDayOfWeek !== 0 ? [...firstPart, ...secondPart] : [...secondPart, ...firstPart];\n};\n\nexport const getDaysOfWeekDates: PureComputed<[number], Array<Date>> = (firstDayOfWeek) => {\n  const firstPart = DAYS_OF_WEEK_DATES.slice(firstDayOfWeek, DAYS_OF_WEEK_DATES.length);\n  const secondPart = DAYS_OF_WEEK_DATES.slice(0, firstDayOfWeek);\n  return [...firstPart, ...secondPart];\n};\n\nexport const checkMultipleResourceFields: PureComputed<\n  [object, ValidResource[]], object\n> = (resourceFields, resources) => resources.reduce((acc, resource) => {\n  if (!resource.allowMultiple) {\n    return acc;\n  }\n\n  const fieldName = resource.fieldName;\n  const field = resourceFields[fieldName];\n  return {\n    ...acc,\n    [fieldName]: Array.isArray(field) ? field : [field],\n  };\n}, resourceFields);\n","import { PureReducer } from '@devexpress/dx-core';\nimport {\n  AddedAppointmentDataPayload, AppointmentModel, Changes, EditAppointmentPayload,\n} from '../../types';\n\nexport const addAppointment: PureReducer<\n  AppointmentModel, AddedAppointmentDataPayload, AppointmentModel | {}\n> = (\n  addedAppointmentData, { appointmentData } = { appointmentData:  {} },\n) => appointmentData;\n\nexport const cancelAddedAppointment = () => ({});\n\nexport const startEditAppointment: PureReducer<\n  Partial<AppointmentModel>, EditAppointmentPayload\n> = (prevEditingAppointment, appointmentData) => appointmentData;\n\nexport const stopEditAppointment = () => null;\n\nexport const changeAppointment: PureReducer<\nAppointmentModel, Changes\n> = (\n  appointment, { change },\n) => ({ ...appointment, ...change });\n\nexport const cancelChanges = () => ({});\n","import { PureComputed } from '@devexpress/dx-core';\nimport { AppointmentId, AppointmentChanges, Changes } from '../../types';\n\nexport const changedAppointmentById: PureComputed<\n  [Changes, AppointmentId], AppointmentChanges\n> = (changes, appointmentId) => (\n  { [appointmentId]: changes }\n);\n","import moment from 'moment';\nimport { RRule, RRuleSet } from 'rrule';\nimport {\n  AppointmentModel, PreCommitChangesFn, Changes, MakeDateSequenceFn, EditFn, DeleteFn, ChangeFn,\n} from '../../types';\nimport { RECURRENCE_EDIT_SCOPE } from '../../constants';\nimport { getUTCDate, getRRuleSetWithExDates, formatDateToString } from '../../utils';\n\nconst mergeNewChanges = (\n  appointmentData: Partial<AppointmentModel>, changes: Changes,\n) => {\n  const appointment = {\n    ...appointmentData,\n  };\n  delete appointment.id;\n  delete appointment.rRule;\n  delete appointment.exDate;\n  delete appointment.parentData;\n  return { ...appointment, ...changes };\n};\n\nconst reduceExDate = (prevExDate: string, boundDate: Date) => {\n  if (prevExDate.length > 0) {\n    return prevExDate.split(',').reduce((acc: string[], date: string) => {\n      const momentDate = moment.utc(date);\n      if (momentDate.isBefore(boundDate)) {\n        return [...acc, date];\n      }\n      return acc;\n    }, []).join(',');\n  }\n  return undefined;\n};\n\nconst configureExDate = (exDate: string | undefined, date: Date) => {\n  const currentExDate = `${moment.utc(date).format('YYYYMMDDTHHmmss')}Z`;\n  return exDate\n    ? `${exDate},${currentExDate}`\n    : currentExDate;\n};\n\nconst configureDateSequence: MakeDateSequenceFn = (rRule, exDate, prevStartDate, nextStartDate) => {\n  const rruleSet = getRRuleSetWithExDates(exDate);\n\n  const currentOptions = RRule.parseString(rRule as string);\n  const correctedOptions = currentOptions.until\n    ? { ...currentOptions, until: moment(getUTCDate(currentOptions.until)).toDate() }\n    : currentOptions;\n  const prevStartDateUTC = moment(getUTCDate(prevStartDate!)).toDate();\n  rruleSet.rrule(new RRule({\n    ...correctedOptions,\n    dtstart: prevStartDateUTC,\n  }));\n  if (currentOptions.count || currentOptions.until) {\n    return rruleSet.all()\n      // we shouldn't use `new Date(string)` because this function has different results in Safari\n      .map(nextDate => moment(formatDateToString(nextDate)).toDate());\n  }\n  const leftBound = prevStartDateUTC;\n  const rightBound = moment(getUTCDate(nextStartDate!)).toDate();\n  return rruleSet.between(leftBound, rightBound, true)\n    .map(nextDate => moment(formatDateToString(nextDate)).toDate());\n};\n\nconst configureICalendarRules = (rRule: string | undefined, options: object) => {\n  const rruleSet = new RRuleSet();\n  rruleSet.rrule(new RRule({\n    ...RRule.parseString(rRule as string),\n    ...options,\n  }));\n  return rruleSet.valueOf();\n};\n\nconst changeCurrentAndFollowing: ChangeFn = (appointmentData, changes, changeAllAction) => {\n  const { rRule, startDate, parentData, exDate: prevExDate = '', id } = appointmentData;\n\n  const { initialSequence, currentChildIndex } = getAppointmentSequenceData(\n    parentData.startDate, moment.utc(startDate as Date).toDate(), prevExDate, rRule,\n  );\n\n  if (currentChildIndex === 0) return changeAllAction(appointmentData, changes);\n\n  const changedRules = configureICalendarRules(rRule as string, {\n    dtstart: moment.utc(parentData.startDate).toDate(),\n    until: moment.utc(initialSequence[currentChildIndex - 1]).toDate(),\n    count: null,\n  });\n\n  const nextExDate = reduceExDate(prevExDate, startDate as Date);\n  return {\n    changed: {\n      [id!]: {\n        rRule: changedRules[1].slice(6),\n        ...nextExDate && prevExDate !== nextExDate ? { exDate: nextExDate } : {},\n      },\n    },\n  };\n};\n\nconst getAppointmentSequenceData = (\n  prevStartDate: Date, startDate: Date, exDate: string, rRule: string | undefined,\n) => {\n  const initialSequence: Date[] = configureDateSequence(rRule, exDate,\n    moment.utc(prevStartDate).toDate(), moment.utc(startDate).toDate(),\n  );\n  const currentChildIndex = initialSequence\n    .findIndex(date => moment(date).isSame(startDate as Date));\n  return { initialSequence, currentChildIndex };\n};\n\nexport const deleteCurrent: DeleteFn = (appointmentData) => {\n  const currentSequence: Date[] = configureDateSequence(\n    appointmentData.rRule, appointmentData.exDate,\n    moment.utc(appointmentData.parentData.startDate).toDate(),\n    moment.utc(appointmentData.startDate).toDate(),\n  );\n\n  if (currentSequence.length === 1) {\n    return deleteAll(appointmentData);\n  }\n\n  const nextExDate = configureExDate(appointmentData.exDate, appointmentData.startDate as Date);\n  return { changed: { [appointmentData.id!]: { exDate: nextExDate } } };\n};\n\nexport const deleteAll: DeleteFn = (appointmentData) => {\n  return { deleted: appointmentData.id };\n};\n\nexport const deleteCurrentAndFollowing: DeleteFn = appointmentData => changeCurrentAndFollowing(\n  appointmentData, {}, deleteAll,\n);\n\nexport const editAll: EditFn = (appointmentData, changes) => {\n  const { rRule, id } = appointmentData;\n\n  const initialRule = new RRule(RRule.parseString(rRule as string));\n  if (changes.startDate\n    && moment.utc(changes.startDate as Date).isAfter(initialRule.options.until!)) {\n    return {\n      changed: {\n        [id!]: {\n          ...changes,\n          rRule: 'FREQ=DAILY;COUNT=1',\n          exDate: '',\n        },\n      },\n    };\n  }\n\n  return  { changed: {  [appointmentData.id!]: changes } };\n};\n\nexport const editCurrent: EditFn = (appointmentData, changes) => ({\n  changed: {\n    [appointmentData.id!]: {\n      exDate: configureExDate(appointmentData.exDate, appointmentData.startDate as Date),\n    },\n  },\n  added: mergeNewChanges(appointmentData as Partial<AppointmentModel>, changes as Changes),\n});\n\nexport const editCurrentAndFollowing: EditFn = (appointmentData, changes) => {\n  const { rRule, startDate, exDate: prevExDate = '', parentData } = appointmentData;\n  const initialRule = new RRule(RRule.parseString(rRule as string));\n\n  const { initialSequence, currentChildIndex } = getAppointmentSequenceData(\n    parentData.startDate, moment.utc(startDate as Date).toDate(),  prevExDate, rRule,\n  );\n  if (currentChildIndex === 0) return editAll(appointmentData, changes);\n\n  const addedOptions = initialRule.options.count || initialRule.options.until\n    ? { count: initialSequence.length - currentChildIndex }\n    : {};\n  const addedRules = configureICalendarRules(appointmentData.rRule as string, {\n    dtstart: moment.utc(startDate as Date).toDate(),\n    ...addedOptions,\n  });\n\n  const addedAppointment = moment.utc(changes.startDate as Date).isAfter(initialRule.options.until!)\n    ? { rRule: 'FREQ=DAILY;COUNT=1', exDate: '' } : { rRule: addedRules[1].slice(6) };\n\n  return {\n    changed: changeCurrentAndFollowing(appointmentData, changes, editAll).changed,\n    added: {\n      ...addedAppointment, ...mergeNewChanges(appointmentData, changes),\n    },\n  };\n};\n\nexport const preCommitChanges: PreCommitChangesFn = (\n  changes, appointmentData, editType,\n) => {\n  if (changes === null) {\n    switch (editType) {\n      case RECURRENCE_EDIT_SCOPE.ALL: {\n        return deleteAll(appointmentData);\n      }\n      case RECURRENCE_EDIT_SCOPE.CURRENT: {\n        return deleteCurrent(appointmentData);\n      }\n      case RECURRENCE_EDIT_SCOPE.CURRENT_AND_FOLLOWING: {\n        return deleteCurrentAndFollowing(appointmentData);\n      }\n    }\n  } else {\n    switch (editType) {\n      case RECURRENCE_EDIT_SCOPE.ALL: {\n        return editAll(appointmentData, changes);\n      }\n      case RECURRENCE_EDIT_SCOPE.CURRENT: {\n        return editCurrent(appointmentData, changes);\n      }\n      case RECURRENCE_EDIT_SCOPE.CURRENT_AND_FOLLOWING: {\n        return editCurrentAndFollowing(appointmentData, changes);\n      }\n    }\n  }\n  return {};\n};\n","import moment from 'moment';\nimport { PureComputed } from '@devexpress/dx-core';\nimport {\n  ViewCell, ClientOffset, TimeType, ScrollingStrategy,\n  AllDayCell, CalculateAppointmentTimeBoundaries,\n  TimeBoundariesByDrag, TimeBoundariesByResize, AppointmentModel,\n  CellElementsMeta, Grouping, ValidResource, Group, SchedulerDateTime, GroupOrientation,\n} from '../../types';\nimport {\n  VERTICAL_TYPE, HORIZONTAL_TYPE, SCROLL_OFFSET, MINUTES,\n  SECONDS, RESIZE_TOP, RESIZE_BOTTOM, HOURS,\n} from '../../constants';\nimport {\n  allDayRects, horizontalTimeTableRects, verticalTimeTableRects,\n} from '../common/calculate-rects';\n\nconst clamp: PureComputed<\n  [number, number, number]\n> = (value, min, max) => Math.max(Math.min(value, max), min);\n\nconst calculateInsideOffset: PureComputed<\n  [string, number, number], number\n> = (targetType, insidePart, cellDurationMinutes) => targetType === VERTICAL_TYPE\n  ? insidePart * cellDurationMinutes * 60 / 2 : 0;\n\nexport const cellType: PureComputed<\n  [ViewCell | AllDayCell], string\n> = data => moment(data.startDate as Date)\n  .isSame(data.endDate as Date, 'day') ? VERTICAL_TYPE : HORIZONTAL_TYPE;\n\nexport const intervalDuration: PureComputed<\n  [ViewCell | AllDayCell, TimeType], number\n> = (data, type) => moment(data.endDate as Date).diff(data.startDate as Date, type);\n\nexport const cellIndex: PureComputed<\n  [Array<() => ClientRect>, ClientOffset], number\n> = (getCellRects, clientOffset) => getCellRects.findIndex((getCellRect) => {\n  const { left, top, right, bottom } = getCellRect();\n  const isOver = clientOffset\n      && clamp(clientOffset.x, left, right) === clientOffset.x\n      && clamp(clientOffset.y, top, bottom) === clientOffset.y;\n  return isOver;\n});\n\nexport const cellData: PureComputed<\n  [number, number, ViewCell[][], ViewCell[][]], ViewCell | AllDayCell\n> = (timeTableIndex, allDayIndex, viewCellsData, allDayCellsData) => {\n  const cellsData = allDayIndex !== -1 ? allDayCellsData : viewCellsData;\n  const currentIndex = allDayIndex !== -1 ? allDayIndex : timeTableIndex;\n  const tableWidth = cellsData[0].length;\n\n  const rowIndex = Math.floor(currentIndex / tableWidth);\n  const columnIndex = currentIndex % tableWidth;\n  return cellsData[rowIndex][columnIndex];\n};\n\nexport const autoScroll: PureComputed<\n  [ClientOffset, ScrollingStrategy, number], void\n> = (clientOffset, scrollingStrategy, scrollSpeed) => {\n  scroll(\n    clientOffset.y, scrollingStrategy.topBoundary, scrollingStrategy.bottomBoundary,\n    scrollingStrategy.changeVerticalScroll, scrollSpeed,\n  );\n  scroll(\n    clientOffset.x, scrollingStrategy.leftBoundary, scrollingStrategy.rightBoundary,\n    scrollingStrategy.changeHorizontalScroll, scrollSpeed,\n  );\n};\n\nconst scroll: PureComputed<\n  [number, number, number, (value: number) => void, number], void\n> = (offset, firstBoundary, secondBoundary, changeScroll, scrollSpeed) => {\n  if ((offset < firstBoundary + SCROLL_OFFSET) && (offset > firstBoundary)) {\n    changeScroll(-scrollSpeed);\n  }\n  if (secondBoundary - SCROLL_OFFSET < offset) {\n    changeScroll(+scrollSpeed);\n  }\n};\n\nexport const timeBoundariesByResize: TimeBoundariesByResize = (\n  payload, targetData, targetType, cellDurationMinutes, insidePart,\n) => {\n  if (targetType !== payload.appointmentType) {\n    return { appointmentStartTime: undefined, appointmentEndTime: undefined };\n  }\n\n  let appointmentStartTime;\n  let appointmentEndTime;\n  const sourceType = payload.type;\n\n  if (sourceType === RESIZE_TOP) {\n    const insideTopOffset = calculateInsideOffset(targetType, insidePart, cellDurationMinutes);\n    appointmentStartTime = moment(targetData.startDate as Date)\n      .add(insideTopOffset, SECONDS).toDate();\n    appointmentEndTime = moment(payload.endDate as Date).toDate();\n  }\n  if (sourceType === RESIZE_BOTTOM) {\n    const insideBottomOffset = insidePart === 0 && targetType === VERTICAL_TYPE\n      ? cellDurationMinutes * 60 / 2 : 0;\n    appointmentEndTime = moment(targetData.endDate as Date)\n      .add(-insideBottomOffset, SECONDS).toDate();\n    appointmentStartTime = moment(payload.startDate as Date).toDate();\n  }\n  // keep origin appointment duration if coordinates are wrong\n  if (moment(appointmentEndTime).diff(appointmentStartTime, MINUTES) < 1) {\n    appointmentStartTime = moment(payload.startDate as Date).toDate();\n    appointmentEndTime = moment(payload.endDate as Date).toDate();\n  }\n  return { appointmentStartTime, appointmentEndTime };\n};\n\nexport const timeBoundariesByDrag: TimeBoundariesByDrag = (\n  payload, targetData, targetType,\n  cellDurationMinutes, insidePart, offsetTimeTopBase,\n) => {\n  if (targetType === HORIZONTAL_TYPE\n    && intervalDuration(payload, SECONDS) < intervalDuration(targetData, SECONDS)) {\n    return {\n      appointmentStartTime: targetData.startDate as Date,\n      appointmentEndTime: targetData.endDate as Date,\n      offsetTimeTop: 0,\n    };\n  }\n  let offsetTimeTop;\n  let appointmentStartTime;\n  let appointmentEndTime;\n\n  const insideOffset = calculateInsideOffset(targetType, insidePart, cellDurationMinutes);\n  const start = moment(targetData.startDate as Date).add(insideOffset, SECONDS);\n\n  if (offsetTimeTopBase === null) {\n    offsetTimeTop = moment(targetData.startDate as Date)\n      .diff(payload.startDate as Date, SECONDS) + insideOffset;\n  } else {\n    offsetTimeTop = offsetTimeTopBase;\n  }\n\n  if (payload.type === targetType) {\n    const appointmentDurationSeconds = intervalDuration(payload, SECONDS);\n    appointmentStartTime = moment(start).add((offsetTimeTop) * (-1), SECONDS).toDate();\n    appointmentEndTime = moment(start)\n      .add((appointmentDurationSeconds - offsetTimeTop), SECONDS).toDate();\n  } else {\n    appointmentStartTime = moment(targetData.startDate as Date)\n      .add(insideOffset, SECONDS).toDate();\n    appointmentEndTime = moment(targetData.endDate as Date).add(insideOffset, SECONDS).toDate();\n  }\n\n  return { appointmentStartTime, appointmentEndTime, offsetTimeTop };\n};\n\nexport const calculateAppointmentTimeBoundaries: CalculateAppointmentTimeBoundaries = (\n  payload, targetData, targetType,\n  cellDurationMinutes, insidePart, offsetTimeTopBase,\n) => {\n  const isDragging = (payload.type === VERTICAL_TYPE || payload.type === HORIZONTAL_TYPE);\n\n  return(isDragging\n    ? timeBoundariesByDrag(\n        payload, targetData as AppointmentModel, targetType,\n        cellDurationMinutes, insidePart, offsetTimeTopBase,\n      )\n    : timeBoundariesByResize(\n        payload, targetData as AppointmentModel, targetType, cellDurationMinutes, insidePart,\n      )\n  );\n};\n\nexport const calculateInsidePart: PureComputed<\n  [number, Array<() => ClientRect>, number]\n> = (top, timeTableCellsRects, timeTableIndex) => {\n  if (timeTableIndex !== undefined && timeTableIndex !== -1) {\n    const cellRect = timeTableCellsRects[timeTableIndex]();\n    return top > cellRect.top + cellRect.height / 2 ? 1 : 0;\n  }\n  return 0;\n};\n\nexport const calculateDraftAppointments = (\n  allDayIndex: number, draftAppointments: any, startViewDate: Date,\n  endViewDate: Date, excludedDays: number[], viewCellsData: any,\n  getAllDayCellsElementRects: CellElementsMeta,\n  targetType: string, cellDurationMinutes: number,\n  getTableCellElementRects: CellElementsMeta,\n  grouping: Grouping[], resources: ValidResource[], groups: Group[][],\n  groupOrientation: GroupOrientation, groupedByDate: boolean,\n) => {\n  if (allDayIndex !== -1 || (targetType === VERTICAL_TYPE\n    && getAllDayCellsElementRects.getCellRects.length\n    && intervalDuration(draftAppointments[0].dataItem, HOURS) > 23)) {\n    const allDayDrafts = draftAppointments.map((draftAppt: any) => ({\n      ...draftAppt,\n      allDay: true,\n    }));\n\n    return {\n      allDayDraftAppointments: allDayRects(\n        allDayDrafts, startViewDate, endViewDate,\n        excludedDays, viewCellsData, getAllDayCellsElementRects,\n        grouping, resources, groups, groupOrientation, groupedByDate,\n      ),\n      timeTableDraftAppointments: [],\n    };\n  }\n\n  if (targetType === VERTICAL_TYPE || allDayIndex !== -1) {\n    return {\n      allDayDraftAppointments: [],\n      timeTableDraftAppointments: verticalTimeTableRects(\n        draftAppointments, startViewDate, endViewDate,\n        excludedDays, viewCellsData, cellDurationMinutes, getTableCellElementRects,\n        grouping, resources, groups, groupOrientation, groupedByDate,\n      ),\n    };\n  }\n  return {\n    allDayDraftAppointments: [],\n    timeTableDraftAppointments: horizontalTimeTableRects(\n      draftAppointments, startViewDate, endViewDate,\n      viewCellsData, getTableCellElementRects,\n      grouping, resources, groups, groupOrientation, groupedByDate,\n    ),\n  };\n};\n\nexport const calculateAppointmentGroups: PureComputed<\n  [Array<Group> | undefined, Array<ValidResource>, AppointmentModel], any\n> = (cellGroupingInfo, resources, appointmentData) => {\n  if (!cellGroupingInfo) return {};\n  return cellGroupingInfo.reduce((acc, group: Group) => {\n    const isMultipleResource = resources.find(\n      resource => (resource.fieldName === group.fieldName),\n    )!.allowMultiple;\n    return {\n      ...acc,\n      [group.fieldName]: isMultipleResource\n        ? updateMultipleResourceInfo(group, appointmentData) : group.id,\n    };\n  }, {});\n};\n\nconst updateMultipleResourceInfo: PureComputed<\n  [Group, AppointmentModel], any\n> = (cellResource, appointmentData) => {\n  const appointmentGroupItems = appointmentData[cellResource.fieldName];\n  if (appointmentGroupItems.findIndex((groupItem: any) => groupItem === cellResource.id) !== -1) {\n    return appointmentGroupItems;\n  }\n  return [cellResource.id];\n};\n\nexport const appointmentDragged: PureComputed<\n  [SchedulerDateTime, SchedulerDateTime, SchedulerDateTime, SchedulerDateTime, any, any], boolean\n> = (start, startPrev, end, endPrev, groupingInfo, groupingInfoPrev) => {\n  if (moment(start as Date).isSame(startPrev as Date)\n      && moment(end as Date).isSame(endPrev as Date)\n      && groupingInfoNotChanged(groupingInfo, groupingInfoPrev)) {\n    return false;\n  }\n  return true;\n};\n\nconst groupingInfoNotChanged: PureComputed<\n  [any, any], boolean\n> = (groupingInfo, groupingInfoPrev) => {\n  const fields = Object.getOwnPropertyNames(groupingInfo);\n  return fields.every((field) => {\n    if (Array.isArray(groupingInfo[field]) && Array.isArray(groupingInfoPrev[field])) {\n      return groupingInfo[field].every((item: any, index: number) => (\n        item === groupingInfoPrev[field][index]\n      ));\n    }\n    return groupingInfo[field] === groupingInfoPrev[field];\n  });\n};\n","import { PureComputed } from '@devexpress/dx-core';\nimport moment from 'moment';\nimport {\n  IsCellShadedFn, IsShadedAppointment,\n  GetCurrentTimeIndicatorTopFn,\n} from '../../types';\n\nexport const isMonthCell: PureComputed<\n  [boolean | undefined], boolean\n> = otherMonth => otherMonth !== undefined;\n\nexport const isShadedAppointment: IsShadedAppointment = (\n  { data: appointmentData }, currentTime, shadePreviousAppointments,\n) => {\n  const momentCurrentDate = moment(currentTime);\n  if (appointmentData.allDay) {\n    return momentCurrentDate.isAfter(appointmentData.endDate as Date, 'day')\n    && shadePreviousAppointments;\n  }\n  if (momentCurrentDate.isAfter(appointmentData.endDate as Date)) {\n    return shadePreviousAppointments;\n  }\n  return false;\n};\n\nexport const getCurrentTimeIndicatorTop: GetCurrentTimeIndicatorTopFn = (\n  cellData, currentTime,\n) => {\n  const top = ((currentTime - cellData.startDate.getTime()) * 100)\n  / (cellData.endDate.getTime() - cellData.startDate.getTime());\n  return (top < 0 || top > 100) ? undefined : `${top}%`;\n};\n\nexport const isCellShaded: IsCellShadedFn = (\n  { startDate, endDate, otherMonth }, currentTime, shadePreviousCells,\n) => {\n  const monthCell = isMonthCell(otherMonth);\n  return ((startDate.getTime() < currentTime && !monthCell)\n    || endDate.getTime() < currentTime && monthCell) && shadePreviousCells;\n};\n","import { GetAppointmentResources, ValidResourceInstance, ValidResource } from '../../types';\nimport { PureComputed } from '@devexpress/dx-core';\n\nexport const getAppointmentResources: GetAppointmentResources = (\n  appointment, resources, plainResources,\n) => {\n  if (\n    !resources || resources.length === 0\n    || !plainResources || plainResources.length === 0\n  ) return [];\n\n  return resources.reduce((acc, resource) => {\n    const appointmentResourceId = appointment[resource.fieldName];\n    if (appointmentResourceId === undefined) return acc;\n\n    if (resource.allowMultiple && !Array.isArray(appointmentResourceId)\n    || !resource.allowMultiple && Array.isArray(appointmentResourceId)) {\n      // throw error\n      return acc;\n    }\n\n    if (resource.allowMultiple) {\n      return [\n        ...acc,\n        ...(appointmentResourceId as Array<number | string>)\n        .reduce((prevResources, itemId) => addResourceToAppointmentResources(\n          plainResources, prevResources, resource, itemId,\n        ) as Array<ValidResourceInstance>, [] as Array<ValidResourceInstance>),\n      ];\n    }\n\n    return addResourceToAppointmentResources(\n      plainResources, acc, resource, appointmentResourceId,\n    ) as Array<ValidResourceInstance>;\n  }, [] as Array<ValidResourceInstance>);\n};\n\nconst addResourceToAppointmentResources: PureComputed<\n  [Array<ValidResourceInstance>, Array<ValidResourceInstance>, ValidResource,\n  number | string], Array<ValidResourceInstance>\n> = (plainResources, appointmentResources, resource, resourceId) => {\n  const currentResource = plainResources.find(\n    plainItem => resource.fieldName === plainItem.fieldName && plainItem.id === resourceId,\n  );\n\n  return currentResource ? [\n    ...appointmentResources,\n    currentResource!,\n  ] : appointmentResources;\n};\n","import {\n  ConvertResourcesToPlain, ValidateResources, ValidResourceInstance, AddResourcesToAppointments,\n} from '../../types';\nimport { getAppointmentResources } from './helpers';\n\nexport const convertResourcesToPlain: ConvertResourcesToPlain = (validResources) => {\n  return validResources.reduce((acc, resource) => [\n    ...acc,\n    ...resource.instances.map(item => item),\n  ], [] as Array<ValidResourceInstance>);\n};\n\nexport const validateResources: ValidateResources = (resources, mainResourceName, palette) => {\n  const isMainResourceDefined = !!mainResourceName;\n  let currentPaletteIndex = 0;\n  return resources.map((resource, groupIndex) => {\n    const fieldName = resource.fieldName;\n    const isMain = isMainResourceDefined && mainResourceName === fieldName\n      || groupIndex === 0 && !isMainResourceDefined;\n    const title = resource.title || fieldName;\n    const allowMultiple = !!resource.allowMultiple;\n    return {\n      fieldName,\n      isMain,\n      title,\n      allowMultiple,\n      instances: resource.instances.map((resourceItem) => {\n        const color = resourceItem.color || palette[currentPaletteIndex % palette.length];\n        if (!resourceItem.color) currentPaletteIndex += 1;\n\n        return ({\n          id: resourceItem.id,\n          color,\n          fieldName,\n          text: resourceItem.text || title || fieldName,\n          title,\n          allowMultiple,\n          isMain,\n        });\n      }),\n    };\n  });\n};\n\nexport const addResourcesToAppointments: AddResourcesToAppointments = (\n  appointments, resources, plainResources,\n) => [\n  appointments.map(appointment => ({\n    ...appointment,\n    resources: getAppointmentResources(appointment.dataItem, resources, plainResources),\n  })),\n];\n","import { PureReducer, slice } from '@devexpress/dx-core';\nimport {\n  ResourceGroupingState, ToggleGroupPayload,\n} from '../../types';\n\nexport const toggleExpandedGroups: PureReducer<ResourceGroupingState, ToggleGroupPayload> = (\n  state, { groupKey },\n) => {\n  const expandedGroups = slice(state.expandedGroups);\n  const groupKeyIndex = expandedGroups.indexOf(groupKey);\n\n  if (groupKeyIndex > -1) {\n    expandedGroups.splice(groupKeyIndex, 1);\n  } else {\n    expandedGroups.push(groupKey);\n  }\n\n  return { expandedGroups };\n};\n","import moment, { Moment } from 'moment';\nimport { ViewCell } from '../../types';\nimport { PureComputed } from '@devexpress/dx-core';\n\nexport const getDayScaleCellColSpan: PureComputed<\n  [ViewCell[][]], number\n> = (cellsData) => {\n  const firstDate = cellsData[0][0].startDate;\n  let count = 1;\n  while (cellsData[0][count] && moment(cellsData[0][count].startDate).isSame(firstDate, 'day')) {\n    count += 1;\n  }\n  return count;\n};\n\nexport const getDayScaleCells: PureComputed<\n[ViewCell[][], boolean], ViewCell[]\n> = (cellsData, groupedByDate) => {\n  if (!groupedByDate) {\n    return cellsData[0].map(({\n      startDate, endDate, today, endOfGroup, groupingInfo,\n    }, index) => ({\n      key: index.toString(),\n      startDate, endDate, today, endOfGroup, groupingInfo,\n    }));\n  }\n  let prevDate: Moment;\n  const colSpan = getDayScaleCellColSpan(cellsData);\n  return cellsData[0].reduce((acc, { startDate, endDate, today }, index) => {\n    const currentDate = moment(startDate);\n    if (currentDate.isSame(prevDate)) {\n      return acc;\n    }\n    prevDate = currentDate;\n    return [\n      ...acc, {\n        key: index.toString(),\n        startDate, endDate, today, colSpan,\n        endOfGroup: true,\n      },\n    ];\n  }, [] as ViewCell[]);\n};\n","import { PureComputed } from '@devexpress/dx-core';\nimport { SchedulerDateTime } from '../../types';\nimport moment from 'moment';\n\nexport const navigateByOneMonth: PureComputed<\n  [SchedulerDateTime, boolean], Date\n> = (currentDate, isBackward) => moment(currentDate as SchedulerDateTime)\n  [isBackward ? 'subtract' : 'add'](1, 'month').toDate();\n","import { AppointmentModel, SchedulerDateTime } from './scheduler-core.types';\nimport { PureComputed } from '@devexpress/dx-core';\nimport { RRULE_REPEAT_TYPES } from '../plugins/appointment-form/constants';\n\n/** @internal */\nexport type Action = ([fieldName]?: any) => void;\n/** @internal */\nexport type StartDate = SchedulerDateTime;\n/** @internal */\nexport type EndDate = SchedulerDateTime;\n/** @internal */\nexport type AppointmentDataPayload = {\n  appointmentData: AppointmentModel;\n};\n/** @internal */\nexport type AddedAppointmentDataPayload = {\n  appointmentData: AppointmentModel | {};\n};\n/** @internal */\nexport type RadioGroupDisplayData = {\n  weekNumber: number;\n  dayNumberTextField: number;\n  dayOfWeek: number;\n  radioGroupValue: string;\n};\n/** An option in the Select editor. */\nexport type SelectOption = {\n  /** The option's text. */\n  text: string;\n  /** The option's id. */\n  id: number | string;\n};\n/** @internal */\nexport type OptionsFormatterFn = PureComputed<\n  [(messageKey: string) => string], Array<SelectOption>\n>;\n/** @internal */\nexport type DateFormatterFn = PureComputed<\n  [(date: Date, formatOptions: object) => string], Array<SelectOption>\n>;\n/** @internal */\nexport enum RecurrenceFrequency {\n  Daily = RRULE_REPEAT_TYPES.DAILY,\n  Weekly = RRULE_REPEAT_TYPES.WEEKLY,\n  Monthly = RRULE_REPEAT_TYPES.MONTHLY,\n  Yearly = RRULE_REPEAT_TYPES.YEARLY,\n}\n"],"names":["isMidnight","getCellRect"],"mappings":"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"}